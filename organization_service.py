"""
Organization Service - –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –ª–∏–¥—ç—Ä, –±–∞–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
"""

import requests
from typing import Dict, Optional, List
from config import Config
from planner_service import get_access_token

class OrganizationService:
    """–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –±“Ø—Ç—ç—Ü –±–æ–ª–æ–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö —Å–µ—Ä–≤–∏—Å"""
    
    def __init__(self):
        try:
            self.base_url = "https://graph.microsoft.com/v1.0"
            self.access_token = get_access_token()
            
            if not self.access_token:
                print("‚ö†Ô∏è Graph API token –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞")
                self.headers = None
            else:
                self.headers = {
                    "Authorization": f"Bearer {self.access_token}",
                    "Content-Type": "application/json"
                }
                
        except Exception as e:
            print(f"‚ùå Organization service —ç—Ö–ª“Ø“Ø–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {str(e)}")
            self.headers = None
    
    def get_user_manager(self, user_email: str) -> Optional[Dict]:
        """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –ª–∏–¥—ç—Ä–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
        
        if not self.headers:
            print("‚ùå Graph API headers –∞–ª–≥–∞ –±–∞–π–Ω–∞")
            return None
            
        try:
            url = f"{self.base_url}/users/{user_email}/manager"
            response = requests.get(url, headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                manager_data = response.json()
                return {
                    "id": manager_data.get("id"),
                    "displayName": manager_data.get("displayName"),
                    "mail": manager_data.get("mail"),
                    "jobTitle": manager_data.get("jobTitle"),
                    "department": manager_data.get("department")
                }
            elif response.status_code == 404:
                print(f"–•—ç—Ä—ç–≥–ª—ç–≥—á {user_email}-–Ω –ª–∏–¥—ç—Ä –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
                return None
            else:
                print(f"‚ùå Manager –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Manager –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {str(e)}")
            return None
    
    def get_user_team_members(self, user_email: str) -> List[Dict]:
        """–•—ç—Ä—ç–≥–ª—ç–≥—á—Ç—ç–π –Ω—ç–≥ –±–∞–≥—Ç –∞–∂–∏–ª–ª–∞–¥–∞–≥ —Ö“Ø–º“Ø“Ø—Å–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç"""
        
        if not self.headers:
            print("‚ùå Graph API headers –∞–ª–≥–∞ –±–∞–π–Ω–∞")
            return []
            
        try:
            # –≠—Ö–ª—ç—ç–¥ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –ª–∏–¥—ç—Ä–∏–π–≥ –æ–ª–æ—Ö
            manager = self.get_user_manager(user_email)
            if not manager:
                return []
            
            # –õ–∏–¥—ç—Ä–∏–π–Ω –¥–æ—Ä –∞–∂–∏–ª–ª–∞–¥–∞–≥ —Ö“Ø–º“Ø“Ø—Å–∏–π–≥ –æ–ª–æ—Ö
            manager_id = manager.get("id")
            url = f"{self.base_url}/users/{manager_id}/directReports"
            response = requests.get(url, headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                team_data = response.json().get("value", [])
                team_members = []
                
                for member in team_data:
                    team_members.append({
                        "id": member.get("id"),
                        "displayName": member.get("displayName"),
                        "mail": member.get("mail"),
                        "jobTitle": member.get("jobTitle")
                    })
                
                return team_members
            else:
                print(f"‚ùå Team members –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"‚ùå Team members –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {str(e)}")
            return []
    
    def get_user_profile(self, user_email: str) -> Optional[Dict]:
        """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
        
        if not self.headers:
            print("‚ùå Graph API headers –∞–ª–≥–∞ –±–∞–π–Ω–∞")
            return None
            
        try:
            url = f"{self.base_url}/users/{user_email}"
            response = requests.get(url, headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                user_data = response.json()
                return {
                    "id": user_data.get("id"),
                    "displayName": user_data.get("displayName"),
                    "mail": user_data.get("mail"),
                    "jobTitle": user_data.get("jobTitle"),
                    "department": user_data.get("department"),
                    "officeLocation": user_data.get("officeLocation"),
                    "mobilePhone": user_data.get("mobilePhone"),
                    "businessPhones": user_data.get("businessPhones", [])
                }
            else:
                print(f"‚ùå User profile –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå User profile –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {str(e)}")
            return None
    
    def format_leave_notification_for_manager(self, leave_request: Dict, user_profile: Dict = None) -> Dict:
        """–õ–∏–¥—ç—Ä—Ç –∏–ª–≥—ç—ç—Ö —á”©–ª”©”©–Ω–∏–π –º—ç–¥—ç–≥–¥–ª–∏–π–≥ —Ñ–æ—Ä–º–∞—Ç–ª–∞—Ö"""
        
        user_email = leave_request.get("user_email", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
        start_date = leave_request.get("start_date", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
        end_date = leave_request.get("end_date", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
        reason = leave_request.get("reason", "–®–∞–ª—Ç–≥–∞–∞–Ω –¥—É—Ä–¥–∞–∞–≥“Ø–π")
        hours = leave_request.get("in_active_hours", 8.0)
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä
        display_name = user_profile.get("displayName", user_email) if user_profile else user_email
        job_title = user_profile.get("jobTitle", "") if user_profile else ""
        
        notification = {
            "text": f"üèñÔ∏è **–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç**\n\n"
                   f"üë§ **–•“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Å—ç–Ω:** {display_name}\n"
                   f"üìß **–ò-–º—ç–π–ª:** {user_email}\n"
        }
        
        if job_title:
            notification["text"] += f"üíº **–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª:** {job_title}\n"
        
        notification["text"] += (
            f"üìÖ **–≠—Ö–ª—ç—Ö ”©–¥”©—Ä:** {start_date}\n"
            f"üìÖ **–î—É—É—Å–∞—Ö ”©–¥”©—Ä:** {end_date}\n"
            f"‚è∞ **–ù–∏–π—Ç —Ü–∞–≥:** {hours} —Ü–∞–≥\n"
            f"üìù **–®–∞–ª—Ç–≥–∞–∞–Ω:** {reason}\n\n"
            f"üí° –≠–Ω—ç —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ Teams –¥–æ—Ç—Ä–æ–æ—Å —à–∏–π–¥–≤—ç—Ä–ª—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π."
        )
        
        return notification 