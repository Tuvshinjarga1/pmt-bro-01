# PMT Bot - –ë“Ø—Ç—ç—ç—Ö “Ø–π–ª —è–≤—Ü—ã–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∑–∞–∞–≤–∞—Ä

## üìã –ê–≥—É—É–ª–≥–∞
1. [–¢”©—Å–ª–∏–π–Ω —Ç–æ–≤—á —Ç–∞–Ω–∏–ª—Ü—É—É–ª–≥–∞](#—Ç”©—Å–ª–∏–π–Ω-—Ç–æ–≤—á-—Ç–∞–Ω–∏–ª—Ü—É—É–ª–≥–∞)
2. [–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–π–Ω —Å—Ç–µ–∫](#—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π–Ω-—Å—Ç–µ–∫)
3. [–°–∏—Å—Ç–µ–º–∏–π–Ω –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä](#—Å–∏—Å—Ç–µ–º–∏–π–Ω-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä)
4. [–•”©–≥–∂“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω “Ø–µ —à–∞—Ç—É—É–¥](#—Ö”©–≥–∂“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω-“Ø–µ-—à–∞—Ç—É—É–¥)
5. [“Æ–Ω–¥—Å—ç–Ω —Ñ—É–Ω–∫—Ü—É—É–¥](#“Ø–Ω–¥—Å—ç–Ω-—Ñ—É–Ω–∫—Ü—É—É–¥)
6. [API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—É–¥](#api-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—É–¥)
7. [–•—ç—Ä—ç–≥–ª—ç—ç–Ω–∏–π –∂–∏—à—ç—ç–Ω“Ø“Ø–¥](#—Ö—ç—Ä—ç–≥–ª—ç—ç–Ω–∏–π-–∂–∏—à—ç—ç–Ω“Ø“Ø–¥)
8. [–°—É—É–ª–≥–∞—Ö –∑–∞–∞–≤–∞—Ä](#—Å—É—É–ª–≥–∞—Ö-–∑–∞–∞–≤–∞—Ä)
9. [–¢–æ—Ö–∏—Ä–≥–æ–æ](#—Ç–æ—Ö–∏—Ä–≥–æ–æ)
10. [–ê–ª–¥–∞–∞ –∑–∞—Å–∞—Ö](#–∞–ª–¥–∞–∞-–∑–∞—Å–∞—Ö)

---

## üéØ –¢”©—Å–ª–∏–π–Ω —Ç–æ–≤—á —Ç–∞–Ω–∏–ª—Ü—É—É–ª–≥–∞

**PMT Bot** –Ω—å Microsoft Teams –¥—ç—ç—Ä –∞–∂–∏–ª–ª–∞–∂, –∞–∂–∏–ª—Ç–Ω—É—É–¥—ã–Ω —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂, –∑”©–≤—à”©”©—Ä”©–≥—á —Ä“Ø“Ø –∏–ª–≥—ç—ç–¥—ç–≥ —É—Ö–∞–∞–ª–∞–≥ bot —é–º.

### üéØ “Æ–Ω–¥—Å—ç–Ω –∑–æ—Ä–∏–ª–≥–æ
- –ê–∂–∏–ª—Ç–Ω—É—É–¥—ã–Ω —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
- AI –∞—à–∏–≥–ª–∞–Ω –±–∞–π–≥–∞–ª–∏–π–Ω —Ö—ç–ª –¥—ç—ç—Ä—Ö —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –æ–π–ª–≥–æ—Ö
- Microsoft Planner tasks –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞—Ä—É—É–ª–∞—Ö
- –ó”©–≤—à”©”©—Ä”©–≥—á —Ä“Ø“Ø adaptive card –∏–ª–≥—ç—ç—Ö
- External API-—Ç–∞–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏ —Ö–∏–π—Ö

---

## üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–π–Ω —Å—Ç–µ–∫

### Backend Framework
- **Python 3.11** - “Æ–Ω–¥—Å—ç–Ω —Ö—ç–ª
- **Flask** - Web framework
- **Bot Framework SDK** - Microsoft Teams bot
- **asyncio** - –ê—Å–∏–Ω—Ö—Ä–æ–Ω –ø—Ä–æ–≥—Ä–∞–º—á–ª–∞–ª

### AI & NLP
- **OpenAI GPT-4** - –ë–∞–π–≥–∞–ª–∏–π–Ω —Ö—ç–ª –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
- **Custom prompt engineering** - –ú–æ–Ω–≥–æ–ª —Ö—ç–ª –¥—ç—ç—Ä—Ö —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –æ–π–ª–≥–æ—Ö

### Microsoft Integration
- **Microsoft Graph API** - User, Planner –º—ç–¥—ç—ç–ª—ç–ª
- **Teams Webhook** - –ú—ç–¥—ç–≥–¥—ç–ª –∏–ª–≥—ç—ç—Ö
- **Adaptive Cards** - UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

### External APIs
- **MCP Server** - Absence management system
- **Railway** - Deployment platform

### Data Storage
- **JSON files** - Local storage
- **File system** - Conversation references

---

## üèóÔ∏è –°–∏—Å—Ç–µ–º–∏–π–Ω –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Teams User    ‚îÇ    ‚îÇ   Manager       ‚îÇ    ‚îÇ   External      ‚îÇ
‚îÇ                 ‚îÇ    ‚îÇ   (Approver)    ‚îÇ    ‚îÇ   Systems       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          ‚îÇ                      ‚îÇ                      ‚îÇ
          ‚îÇ Message              ‚îÇ Approval              ‚îÇ API Calls
          ‚ñº                      ‚ñº                      ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                    PMT Bot Server                              ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê            ‚îÇ
‚îÇ  ‚îÇ   Message   ‚îÇ  ‚îÇ   AI        ‚îÇ  ‚îÇ   Planner   ‚îÇ            ‚îÇ
‚îÇ  ‚îÇ  Handler    ‚îÇ  ‚îÇ  Parser     ‚îÇ  ‚îÇ   Service   ‚îÇ            ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò            ‚îÇ
‚îÇ                                                                 ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê            ‚îÇ
‚îÇ  ‚îÇ   Approval  ‚îÇ  ‚îÇ   External  ‚îÇ  ‚îÇ   Teams     ‚îÇ            ‚îÇ
‚îÇ  ‚îÇ   Workflow  ‚îÇ  ‚îÇ   API       ‚îÇ  ‚îÇ  Webhook    ‚îÇ            ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

---

## üìà –•”©–≥–∂“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω “Ø–µ —à–∞—Ç—É—É–¥

### 1Ô∏è‚É£ “Æ–Ω–¥—Å—ç–Ω Bot Framework —Å—É—É—Ä—å (1-2 —Ö–æ–Ω–æ–≥)
```python
# app.py - –≠—Ö–Ω–∏–π —Ö—É–≤–∏–ª–±–∞—Ä
from flask import Flask, request, jsonify
from botbuilder.core import BotFrameworkAdapter
from botbuilder.schema import Activity

app = Flask(__name__)
ADAPTER = BotFrameworkAdapter(SETTINGS)

@app.route("/api/messages", methods=["POST"])
def process_messages():
    # –≠–Ω–≥–∏–π–Ω echo bot
    activity = Activity().deserialize(request.get_json())
    return jsonify({"status": "success"})
```

**–•–∏–π—Å—ç–Ω –∑“Ø–π–ª—Å:**
- Bot Framework —Å—É—É–ª–≥–∞—Ö
- Flask server “Ø“Ø—Å–≥—ç—Ö
- –≠–Ω–≥–∏–π–Ω message handler
- Teams-—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö

### 2Ô∏è‚É£ AI Integration (2-3 —Ö–æ–Ω–æ–≥)
```python
# OpenAI integration
import openai
from openai import OpenAI

openai_client = OpenAI(api_key=Config.OPENAI_API_KEY)

def parse_leave_request(text, user_name):
    prompt = f"""
    –¢–∞ —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö —Ç—É—Å–ª–∞—Ö —é–º.
    –ú–µ—Å—Å–µ–∂: "{text}"
    JSON –±—É—Ü–∞–∞: {{"start_date": "...", "end_date": "...", "reason": "..."}}
    """
    
    response = openai_client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.1
    )
    
    return json.loads(response.choices[0].message.content)
```

**–•–∏–π—Å—ç–Ω –∑“Ø–π–ª—Å:**
- OpenAI API —Ö–æ–ª–±–æ–≥–¥–æ—Ö
- Custom prompt engineering
- –ú–æ–Ω–≥–æ–ª —Ö—ç–ª –¥—ç—ç—Ä—Ö —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –æ–π–ª–≥–æ—Ö
- JSON response parse —Ö–∏–π—Ö

### 3Ô∏è‚É£ Microsoft Graph API (2-3 —Ö–æ–Ω–æ–≥)
```python
# get_tasks.py - Planner tasks –∞–≤–∞—Ö
class MicrosoftPlannerTasksAPI:
    def __init__(self, access_token: str):
        self.base_url = "https://graph.microsoft.com/v1.0"
        self.headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
    
    def get_user_tasks(self, user_email: str) -> List[Dict]:
        url = f"{self.base_url}/users/{user_email}/planner/tasks"
        response = requests.get(url, headers=self.headers)
        return response.json().get("value", [])
```

**–•–∏–π—Å—ç–Ω –∑“Ø–π–ª—Å:**
- Microsoft Graph API authentication
- Planner tasks –∞–≤–∞—Ö
- User information –∞–≤–∞—Ö
- Access token caching

### 4Ô∏è‚É£ Approval Workflow (3-4 —Ö–æ–Ω–æ–≥)
```python
# Adaptive Cards “Ø“Ø—Å–≥—ç—Ö
def create_approval_card(request_data):
    card = {
        "type": "AdaptiveCard",
        "version": "1.4",
        "body": [
            {
                "type": "TextBlock",
                "text": "üèñÔ∏è –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç",
                "weight": "bolder"
            },
            {
                "type": "FactSet",
                "facts": [
                    {"title": "–•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á:", "value": request_data["requester_name"]},
                    {"title": "–≠—Ö–ª—ç—Ö ”©–¥”©—Ä:", "value": request_data["start_date"]}
                ]
            }
        ],
        "actions": [
            {
                "type": "Action.Submit",
                "title": "‚úÖ –ó”©–≤—à”©”©—Ä”©—Ö",
                "data": {"action": "approve", "request_id": request_data["request_id"]}
            }
        ]
    }
    return card
```

**–•–∏–π—Å—ç–Ω –∑“Ø–π–ª—Å:**
- Adaptive Cards –¥–∏–∑–∞–π–Ω
- Approval/Rejection workflow
- Conversation reference —Ö–∞–¥–≥–∞–ª–∞—Ö
- Timer –º–µ—Ö–∞–Ω–∏–∑–º (timeout)

### 5Ô∏è‚É£ External API Integration (2-3 —Ö–æ–Ω–æ–≥)
```python
# External absence API
async def call_external_absence_api(request_data):
    api_url = "https://mcp-server-production-6219.up.railway.app/call-function"
    
    payload = {
        "function": "create_absence_request",
        "args": {
            "user_email": request_data.get("requester_email"),
            "start_date": request_data.get("start_date"),
            "end_date": request_data.get("end_date"),
            "reason": request_data.get("reason", ""),
            "in_active_hours": request_data.get("inactive_hours", 8)
        }
    }
    
    response = requests.post(api_url, json=payload, timeout=30)
    return response.json()
```

**–•–∏–π—Å—ç–Ω –∑“Ø–π–ª—Å:**
- Azure bot “Ø“Ø—Å–≥—ç—Ö
- –®–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π permission-“Ø“Ø–¥–∏–π–≥ –∞–≤–∞—Ö
- MCP Server API —Ö–æ–ª–±–æ–≥–¥–æ—Ö
- Absence request “Ø“Ø—Å–≥—ç—Ö
- Approval/Rejection API
- Error handling

### 6Ô∏è‚É£ Advanced Features (3-4 —Ö–æ–Ω–æ–≥)
```python
# Replacement worker management
def assign_replacement_worker(requester_email: str, replacement_email: str) -> Dict:
    users_api = MicrosoftUsersAPI(access_token)
    
    # Sponsor —Ç–æ–º–∏–ª–æ—Ö (Microsoft Graph)
    success = users_api.assign_sponsor_to_user(
        requester.get('id'), 
        replacement.get('id')
    )
    
    return {"success": success, "message": "–û—Ä–ª–æ–Ω –∞–∂–∏–ª–ª–∞—Ö —Ö“Ø–Ω —Ç–æ–º–∏–ª–æ–≥–¥–ª–æ–æ"}

# Auto cleanup expired leaves
def check_and_cleanup_expired_leaves():
    current_date = datetime.now().date()
    
    for file_path in glob.glob(f"{LEAVE_REQUESTS_DIR}/request_*.json"):
        with open(file_path, 'r') as f:
            request_data = json.load(f)
        
        end_date = datetime.strptime(request_data['end_date'], '%Y-%m-%d').date()
        
        if end_date < current_date:
            # –ê–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –æ—Ä–ª–æ–Ω –∞–∂–∏–ª–ª–∞—Ö —Ö“Ø–º“Ø“Ø—Å–∏–π–≥ —Ö–∞—Å–∞—Ö
            auto_remove_replacement_workers_on_leave_end(
                request_data['requester_email']
            )
```

**–•–∏–π—Å—ç–Ω –∑“Ø–π–ª—Å:**
- –û—Ä–ª–æ–Ω –∞–∂–∏–ª–ª–∞—Ö —Ö“Ø–Ω —Ç–æ–º–∏–ª–æ—Ö
- –ê–≤—Ç–æ–º–∞—Ç cleanup –º–µ—Ö–∞–Ω–∏–∑–º
- Teams webhook notification
- Manager timeout handling

---

## üîß “Æ–Ω–¥—Å—ç–Ω —Ñ—É–Ω–∫—Ü—É—É–¥

### 1. AI-powered Leave Request Parsing
```python
def parse_leave_request(text, user_name):
    """
    –ú–æ–Ω–≥–æ–ª —Ö—ç–ª –¥—ç—ç—Ä—Ö —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ AI –∞—à–∏–≥–ª–∞–Ω –æ–π–ª–≥–æ—Ö
    
    –ñ–∏—à—ç—ç:
    "–ú–∞—Ä–≥–∞–∞—à ”©–≤—á—Ç—ç–π –±–æ–ª–æ–æ–¥ 1 —Ö–æ–Ω–æ–≥ —á”©–ª”©”© –∞–≤–º–∞–∞—Ä –±–∞–π–Ω–∞"
    ‚Üì
    {
        "start_date": "2024-01-16",
        "end_date": "2024-01-16", 
        "days": 1,
        "reason": "I'm sick!",
        "inactive_hours": 8
    }
    """
```

### 2. Microsoft Planner Integration
```python
def get_user_planner_tasks(user_email):
    """
    –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω Microsoft Planner tasks –∞–≤–∞—Ö
    
    Returns:
    üìã tuvshinjargal@fibo.cloud - Planner Tasks (3 task):
    
    1. üî¥ **Website redesign**
       üìä 60% –¥—É—É—Å—Å–∞–Ω üìÖ 01/20
    
    2. üü° **Database migration** 
       üìä 30% –¥—É—É—Å—Å–∞–Ω üìÖ 01/25
    """
```

### 3. Adaptive Cards UI
```python
def create_approval_card(request_data):
    """
    –ó”©–≤—à”©”©—Ä”©–≥—á–∏–¥ —Ö–∞—Ä—É—É–ª–∞—Ö adaptive card “Ø“Ø—Å–≥—ç—Ö
    
    Features:
    - –ß”©–ª”©”©–Ω–∏–π –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª
    - –û—Ä–ª–æ–Ω –∞–∂–∏–ª–ª–∞—Ö —Ö“Ø–Ω —Ç–æ–º–∏–ª–æ—Ö —Ç–∞–ª–±–∞—Ä
    - –ó”©–≤—à”©”©—Ä”©—Ö/–¢–∞—Ç–≥–∞–ª–∑–∞—Ö —Ç–æ–≤—á–Ω—É—É–¥
    - Planner tasks –º—ç–¥—ç—ç–ª—ç–ª
    """
```

### 4. External API Integration
```python
async def call_external_absence_api(request_data):
    """
    MCP Server —Ä—É—É absence request “Ø“Ø—Å–≥—ç—Ö
    
    Flow:
    1. Absence request “Ø“Ø—Å–≥—ç—Ö
    2. Absence ID –∞–≤–∞—Ö
    3. Status update
    4. Error handling
    """
```

### 5. Replacement Worker Management
```python
def assign_replacement_worker(requester_email, replacement_email):
    """
    Microsoft Graph API –∞—à–∏–≥–ª–∞–Ω sponsor —Ç–æ–º–∏–ª–æ—Ö
    
    Process:
    1. User lookup by email
    2. Sponsor assignment
    3. Success confirmation
    """
```

---

## üîó API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—É–¥

### 1. Microsoft Graph API
```python
# Authentication
def get_graph_access_token() -> str:
    url = f"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token"
    data = {
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "scope": "https://graph.microsoft.com/.default",
        "grant_type": "client_credentials"
    }
    response = requests.post(url, headers=headers, data=data)
    return response.json()["access_token"]

# User management
class MicrosoftUsersAPI:
    def search_users_by_job_title(self, job_title: str) -> List[Dict]:
        url = f"{self.base_url}/users?$filter=jobTitle eq '{job_title}'"
        return requests.get(url, headers=self.headers).json()["value"]
    
    def assign_sponsor_to_user(self, user_id: str, sponsor_id: str) -> bool:
        url = f"{self.base_url}/users/{user_id}/sponsors/$ref"
        data = {"@odata.id": f"https://graph.microsoft.com/v1.0/users/{sponsor_id}"}
        return requests.post(url, headers=self.headers, json=data).status_code in [200, 204]
```

### 2. MCP Server API
```python
# Create absence request
async def call_external_absence_api(request_data):
    api_url = "https://mcp-server-production-6219.up.railway.app/call-function"
    payload = {
        "function": "create_absence_request",
        "args": {
            "user_email": request_data.get("requester_email"),
            "start_date": request_data.get("start_date"),
            "end_date": request_data.get("end_date"),
            "reason": request_data.get("reason", ""),
            "in_active_hours": request_data.get("inactive_hours", 8)
        }
    }
    response = requests.post(api_url, json=payload, timeout=30)
    return response.json()

# Approve absence
async def call_approve_absence_api(absence_id, comment="–ó”©–≤—à”©”©—Ä—Å”©–Ω"):
    payload = {
        "function": "approve_absence",
        "args": {
            "absence_id": absence_id,
            "comment": comment
        }
    }
    response = requests.post(api_url, json=payload, timeout=30)
    return response.json()
```

### 3. Teams Webhook
```python
async def send_teams_webhook_notification(requester_name, replacement_worker_name=None):
    webhook_url = "https://prod-36.southeastasia.logic.azure.com:443/workflows/..."
    
    message = f"**{requester_name}** —á”©–ª”©”© –∞–≤—Å–∞–Ω —à“Ø“Ø, –º–∞–Ω–∞–π—Ö–∞–∞–Ω."
    if replacement_worker_name:
        message += f"\\nüîÑ **–û—Ä–ª–æ–Ω –∞–∂–∏–ª–ª–∞—Ö:** {replacement_worker_name}"
    
    payload = {"message": message}
    response = requests.post(webhook_url, json=payload, timeout=30)
    return response.status_code == 200
```

---

## üí¨ –•—ç—Ä—ç–≥–ª—ç—ç–Ω–∏–π –∂–∏—à—ç—ç–Ω“Ø“Ø–¥

### 1. –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç (–ú–æ–Ω–≥–æ–ª —Ö—ç–ª)
```
–•—ç—Ä—ç–≥–ª—ç–≥—á: "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É, –±–∏ –º–∞—Ä–≥–∞–∞—à ”©–≤—á—Ç—ç–π –±–æ–ª–æ–æ–¥ 1 —Ö–æ–Ω–æ–≥ —á”©–ª”©”© –∞–≤–º–∞–∞—Ä –±–∞–π–Ω–∞."

Bot —Ö–∞—Ä–∏—É–ª—Ç:
‚úÖ –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞!
üìÖ 2024-01-16 - 2024-01-16 (1 —Ö–æ–Ω–æ–≥)
üí≠ ”®–≤—á–Ω–∏–π —à–∞–ª—Ç–≥–∞–∞–Ω
‚è≥ –ó”©–≤—à”©”©—Ä”©–ª–∏–π–Ω —Ö“Ø–ª—ç—ç–ª–≥—ç–¥ –±–∞–π–Ω–∞...
‚úÖ –°–∏—Å—Ç–µ–º–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç
```

### 2. –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç (–¢—Ä–∞–Ω—Å–ª–∏—Ç)
```
–•—ç—Ä—ç–≥–ª—ç–≥—á: "hi bi margaash ovchtoi bolood 1 honog chuluu avmaar baina"

Bot —Ö–∞—Ä–∏—É–ª—Ç: (–î—ç—ç—Ä—Ö—Ç—ç–π –∞–¥–∏–ª)
```

### 3. Manager-–¥ –∏–ª–≥—ç—ç–≥–¥—ç—Ö Adaptive Card
```
üì© –®–∏–Ω—ç —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç: Tuvshinjargal Enkhtaivan
üí¨ –ê–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂: "–ú–∞—Ä–≥–∞–∞—à ”©–≤—á—Ç—ç–π –±–æ–ª–æ–æ–¥ 1 —Ö–æ–Ω–æ–≥ —á”©–ª”©”© –∞–≤–º–∞–∞—Ä –±–∞–π–Ω–∞"

[Adaptive Card with approval buttons]

üìã tuvshinjargal@fibo.cloud - Planner Tasks (2 task):

1. üî¥ **Website redesign**
   üìä 60% –¥—É—É—Å—Å–∞–Ω üìÖ 01/20

2. üü° **Database migration**
   üìä 30% –¥—É—É—Å—Å–∞–Ω üìÖ 01/25
```

### 4. Manager Approval
```
Manager: [‚úÖ –ó”©–≤—à”©”©—Ä”©—Ö —Ç–æ–≤—á –¥–∞—Ä–Ω–∞]

Bot —Ö–∞—Ä–∏—É–ª—Ç:
‚úÖ –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –∑”©–≤—à”©”©—Ä”©–≥–¥–ª”©”©!
üìÖ 2024-01-16 - 2024-01-16 (1 —Ö–æ–Ω–æ–≥)
‚úÖ –°–∏—Å—Ç–µ–º–¥ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –∑”©–≤—à”©”©—Ä”©–≥–¥–ª”©”©
```

---

## üöÄ –°—É—É–ª–≥–∞—Ö –∑–∞–∞–≤–∞—Ä

### 1. Repository —Ç–∞—Ç–∞—Ö
```bash
git clone <repository-url>
cd PMT-BRO
```

### 2. Virtual environment “Ø“Ø—Å–≥—ç—Ö
```bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
# —ç—Å–≤—ç–ª
venv\Scripts\activate     # Windows
```

### 3. Dependencies —Å—É—É–ª–≥–∞—Ö
```bash
pip install -r requirements.txt
```

### 4. Environment variables —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
`.env` —Ñ–∞–π–ª “Ø“Ø—Å–≥—ç—Ö:
```env
# Microsoft Bot Framework
MICROSOFT_APP_ID=your_bot_app_id
MICROSOFT_APP_PASSWORD=your_bot_app_password

# OpenAI
OPENAI_API_KEY=your_openai_api_key

# Microsoft Graph API
TENANT_ID=your_azure_tenant_id
CLIENT_ID=your_azure_app_id
CLIENT_SECRET=your_azure_app_secret
```

### 5. Bot –∞—Å–∞–∞—Ö
```bash
python app.py
```

---

## ‚öôÔ∏è –¢–æ—Ö–∏—Ä–≥–æ–æ

### Microsoft Bot Framework
1. Azure Portal –¥—ç—ç—Ä Bot registration “Ø“Ø—Å–≥—ç—Ö
2. App ID, App Password –∞–≤–∞—Ö
3. Messaging endpoint —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö: `https://your-domain.com/api/messages`

### Microsoft Graph API
1. Azure AD App registration “Ø“Ø—Å–≥—ç—Ö
2. API permissions –Ω—ç–º—ç—Ö:
   - `Tasks.Read`
   - `Tasks.ReadWrite`
   - `User.Read.All`
   - `Group.Read.All`
3. Client secret “Ø“Ø—Å–≥—ç—Ö

### OpenAI API
1. OpenAI account “Ø“Ø—Å–≥—ç—Ö
2. API key –∞–≤–∞—Ö
3. Billing —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö

### Deployment (Railway)
1. Railway account “Ø“Ø—Å–≥—ç—Ö
2. GitHub repository —Ö–æ–ª–±–æ–≥–¥–æ—Ö
3. Environment variables –æ—Ä—É—É–ª–∞—Ö
4. Deploy —Ö–∏–π—Ö

---

## üêõ –ê–ª–¥–∞–∞ –∑–∞—Å–∞—Ö

### –ù–∏–π—Ç–ª—ç–≥ –∞–ª–¥–∞–∞–Ω—É—É–¥

#### 1. OpenAI API –∞–ª–¥–∞–∞
```python
# –ê–ª–¥–∞–∞: "OpenAI API key not configured"
# –®–∏–π–¥—ç–ª: .env —Ñ–∞–π–ª–¥ OPENAI_API_KEY –Ω—ç–º—ç—Ö
OPENAI_API_KEY=sk-your-api-key-here
```

#### 2. Microsoft Graph API –∞–ª–¥–∞–∞
```python
# –ê–ª–¥–∞–∞: "Access token –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞"
# –®–∏–π–¥—ç–ª: TENANT_ID, CLIENT_ID, CLIENT_SECRET —à–∞–ª–≥–∞—Ö
TENANT_ID=your-tenant-id
CLIENT_ID=your-client-id
CLIENT_SECRET=your-client-secret
```

#### 3. Bot Framework –∞–ª–¥–∞–∞
```python
# –ê–ª–¥–∞–∞: "Bot framework error"
# –®–∏–π–¥—ç–ª: App ID, App Password —à–∞–ª–≥–∞—Ö
MICROSOFT_APP_ID=your-app-id
MICROSOFT_APP_PASSWORD=your-app-password
```

#### 4. Teams Webhook –∞–ª–¥–∞–∞
```python
# –ê–ª–¥–∞–∞: "Teams webhook timeout"
# –®–∏–π–¥—ç–ª: Webhook URL –∑”©–≤ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
TEAMS_WEBHOOK_URL=https://your-webhook-url
```

### Debug —Ö–∏–π—Ö
```python
# Logging —Ç–æ—Ö–∏—Ä–≥–æ–æ
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Debug –º—ç–¥—ç—ç–ª—ç–ª —Ö—ç–≤–ª—ç—Ö
logger.info(f"Processing message: {text}")
logger.error(f"Error occurred: {str(e)}")
```

---

## üìä –°–∏—Å—Ç–µ–º–∏–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫

### –•—ç—Ä—ç–≥–ª—ç—ç–Ω–∏–π —Ç–æ–æ
- **–ù–∏–π—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á**: 50+
- **”®–¥”©—Ä —Ç—É—Ç–º—ã–Ω —Ö“Ø—Å—ç–ª—Ç**: 10-15
- **AI parsing accuracy**: 95%+
- **API response time**: <2 —Å–µ–∫—É–Ω–¥

### –¢–µ—Ö–Ω–∏–∫–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª
- **Python version**: 3.11
- **Flask version**: 2.3.x
- **Bot Framework**: 4.21.x
- **OpenAI model**: GPT-4o
- **Deployment**: Railway

### –§–∞–π–ª—ã–Ω –±“Ø—Ç—ç—Ü
```
PMT BRO/
‚îú‚îÄ‚îÄ app.py              # “Æ–Ω–¥—Å—ç–Ω bot –ª–æ–≥–∏–∫ (3036 –º”©—Ä)
‚îú‚îÄ‚îÄ config.py           # –¢–æ—Ö–∏—Ä–≥–æ–æ (34 –º”©—Ä)
‚îú‚îÄ‚îÄ get_tasks.py        # Planner tasks (124 –º”©—Ä)
‚îú‚îÄ‚îÄ requirements.txt    # Dependencies (10 –º”©—Ä)
‚îú‚îÄ‚îÄ Dockerfile          # Container (14 –º”©—Ä)
‚îú‚îÄ‚îÄ README.md           # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏ (246 –º”©—Ä)
‚îî‚îÄ‚îÄ guide.txt           # –≠–Ω—ç —Ñ–∞–π–ª
```

---

## üéØ –ò—Ä—ç—ç–¥“Ø–π–Ω —Ç”©–ª”©–≤–ª”©–ª—Ç

### –ù—ç–º—ç–ª—Ç —Ñ—É–Ω–∫—Ü—É—É–¥
1. **Calendar integration** - Outlook calendar-—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö
2. **Analytics dashboard** - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Ö–∞—Ä—É—É–ª–∞—Ö
3. **Multi-language support** - –û–ª–æ–Ω —Ö—ç–ª –¥—ç–º–∂–∏—Ö
4. **Mobile app** - React Native app
5. **Advanced AI** - GPT-4 Turbo –∞—à–∏–≥–ª–∞—Ö

### –¢–µ—Ö–Ω–∏–∫–∏–π–Ω —Å–∞–π–∂—Ä—É—É–ª–∞–ª—Ç
1. **Database migration** - JSON-–∞–∞—Å PostgreSQL —Ä—É—É
2. **Caching system** - Redis –∞—à–∏–≥–ª–∞—Ö
3. **Microservices** - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã–≥ –∑–∞–¥–ª–∞—Ö
4. **CI/CD pipeline** - –ê–≤—Ç–æ–º–∞—Ç deploy
5. **Monitoring** - Prometheus + Grafana

---

## üìû –•–æ–ª–±–æ–æ –±–∞—Ä–∏—Ö

**–•”©–≥–∂“Ø“Ø–ª—ç–≥—á**: Tuvshinjargal Enkhtaivan  
**–ò-–º—ç–π–ª**: tuvshinjargal@fibo.cloud  
**–ö–æ–º–ø–∞–Ω–∏**: Fibo Cloud  
**–¢”©—Å”©–ª**: PMT Bot v1.0  

---

*–≠–Ω—ç guide –Ω—å PMT Bot-—ã–≥ —ç—Ö–Ω—ç—ç—Å –Ω—å –¥—É—É—Å—Ç–∞–ª —Ö—ç—Ä—Ö—ç–Ω –±“Ø—Ç—ç—ç—Å—ç–Ω —Ç–∞–ª–∞–∞—Ä –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –∞–≥—É—É–ª–∂ –±–∞–π–Ω–∞. –ê—Å—É—É–ª—Ç —ç—Å–≤—ç–ª —Å–∞–Ω–∞–ª –±–∞–π–≤–∞–ª —Ö–æ–ª–±–æ–≥–¥–æ–Ω–æ —É—É.*
