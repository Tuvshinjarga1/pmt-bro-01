import requests
import time
from typing import Dict, List, Optional
import os

# ---------------- CONFIG ----------------
TENANT_ID     = os.getenv("TENANT_ID")
CLIENT_ID     = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")

_cached_token = None
_token_expiry = 0  # UNIX timestamp


# ---------------- ACCESS TOKEN ----------------
def get_access_token() -> str:
    global _cached_token, _token_expiry

    # –•—ç—Ä–≤—ç—ç token —Ö“Ø—á–∏–Ω—Ç—ç–π –±–∞–π–≤–∞–ª cache-–∞–∞—Å –±—É—Ü–∞–∞–Ω–∞
    if _cached_token and time.time() < _token_expiry - 10:
        return _cached_token

    url = f"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token"
    headers = { "Content-Type": "application/x-www-form-urlencoded" }
    data = {
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "scope": "https://graph.microsoft.com/.default",
        "grant_type": "client_credentials"
    }

    response = requests.post(url, headers=headers, data=data)
    if response.status_code != 200:
        print("‚ùå Access token –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
        print("Status code:", response.status_code)
        print("Response:", response.text)
        raise Exception("Access token –∞–≤–∞—Ö–∞–¥ –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª–ª–æ–æ")

    token_data = response.json()
    _cached_token = token_data["access_token"]
    _token_expiry = time.time() + token_data.get("expires_in", 3600)

    return _cached_token


# ---------------- USER SEARCH CLASS ----------------
class MicrosoftUsersAPI:
    def __init__(self, access_token: str):
        self.base_url = "https://graph.microsoft.com/v1.0"
        self.headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }

    def search_users_by_job_title(self, job_title: str) -> List[Dict]:
        """–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª–∞–∞—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á —Ö–∞–π—Ö"""
        # URL encode —Ö–∏–π—Ö (–∑–∞–π –±–æ–ª–æ–Ω —Ç—É—Å–≥–∞–π —Ç—ç–º–¥—ç–≥—Ç“Ø“Ø–¥–∏–π–≥ –∑”©–≤ –∫–æ–¥–ª–æ—Ö)
        from urllib.parse import quote
        encoded_job_title = quote(job_title)
        
        url = f"{self.base_url}/users?$select=id,displayName,mail,jobTitle,department,accountEnabled&$filter=jobTitle eq '{encoded_job_title}'"
        
        response = requests.get(url, headers=self.headers)
        
        if response.status_code != 200:
            print(f"‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á —Ö–∞–π—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
            print("Status code:", response.status_code)
            print("Response:", response.text)
            return []
        
        return response.json().get("value", [])

    def search_users_by_partial_job_title(self, partial_title: str) -> List[Dict]:
        """–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª—ã–Ω —Ö—ç—Å—ç–≥—á–∏–ª—Å—ç–Ω –Ω—ç—Ä—ç—ç—Ä —Ö–∞–π—Ö (contains)"""
        from urllib.parse import quote
        encoded_title = quote(partial_title)
        
        url = f"{self.base_url}/users?$select=id,displayName,mail,jobTitle,department,accountEnabled&$filter=contains(jobTitle, '{encoded_title}')"
        
        response = requests.get(url, headers=self.headers)
        
        if response.status_code != 200:
            print(f"‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á —Ö–∞–π—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
            print("Status code:", response.status_code)
            print("Response:", response.text)
            return []
        
        return response.json().get("value", [])

    def get_all_users_with_job_titles(self) -> List[Dict]:
        """–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª—Ç–∞–π –±“Ø—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–≥ –∞–≤–∞—Ö"""
        url = f"{self.base_url}/users?$select=id,displayName,mail,jobTitle,department,accountEnabled&$filter=jobTitle ne null"
        
        response = requests.get(url, headers=self.headers)
        
        if response.status_code != 200:
            print(f"‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–≥ –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
            print("Status code:", response.status_code)
            print("Response:", response.text)
            return []
        
        return response.json().get("value", [])

    def print_users_info(self, users: List[Dict], search_term: str = ""):
        """–•—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö—ç–≤–ª—ç—Ö (–∑”©–≤—Ö”©–Ω –∏–¥—ç–≤—Ö—Ç—ç–π account)"""
        if not users:
            print(f"‚ùå '{search_term}' –∞–ª–±–∞–Ω —Ç—É—à–∞–∞–ª—Ç–∞–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return
        
        # –ó”©–≤—Ö”©–Ω accountEnabled = true –±–∞–π–≥–∞–∞ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–≥ —à“Ø“Ø—Ö
        active_users = [user for user in users if user.get('accountEnabled', True)]
        
        if not active_users:
            print(f"‚ùå '{search_term}' –∞–ª–±–∞–Ω —Ç—É—à–∞–∞–ª—Ç–∞–π –∏–¥—ç–≤—Ö—Ç—ç–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return
        
        print(f"‚úÖ '{search_term}' —Ö–∞–π–ª—Ç–∞–∞—Ä {len(active_users)} –∏–¥—ç–≤—Ö—Ç—ç–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥–ª–æ–æ:")
        print("-" * 80)
        
        for i, user in enumerate(active_users, 1):
            account_enabled = user.get('accountEnabled', True)
            print(f"{i}. {user.get('displayName', '–ù—ç—Ä–≥“Ø–π')}")
            print(f"   –ò-–º—ç–π–ª: {user.get('mail', 'N/A')}")
            print(f"   –ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª: {user.get('jobTitle', 'N/A')}")
            print(f"   –•—ç–ª—Ç—ç—Å: {user.get('Department', 'N/A')}")
            print(f"   ID: {user.get('id', 'N/A')}")
            print(f"   Account enabled: {'‚úÖ Yes' if account_enabled else '‚ùå No'}")
            print("-" * 40)


# ---------------- MAIN ----------------
def main():
    token = get_access_token()
    users_api = MicrosoftUsersAPI(token)
    
    # –°–æ–Ω–≥–æ–ª—Ç 1: –¢–æ–¥–æ—Ä—Ö–æ–π –∞–ª–±–∞–Ω —Ç—É—à–∞–∞–ª–∞–∞—Ä —Ö–∞–π—Ö
    job_title = "Chief Executive Officer"
    print(f"üîç '{job_title}' –∞–ª–±–∞–Ω —Ç—É—à–∞–∞–ª—Ç–∞–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–≥ —Ö–∞–π–∂ –±–∞–π–Ω–∞...")
    exact_users = users_api.search_users_by_job_title(job_title)
    users_api.print_users_info(exact_users, job_title)
    
    print("\n" + "="*80 + "\n")

if __name__ == "__main__":
    main()
