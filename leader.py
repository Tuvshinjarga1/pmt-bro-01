import requests
import time
import os
from typing import Dict, List, Optional

# Environment variables-–∞–∞—Å —É–Ω—à–∏—Ö
CLIENT_ID = os.getenv("CLIENT_ID", "a6e958a7-e8df-4e83-a8c2-5dc73f93bdc4")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
TENANT_ID = os.getenv("TENANT_ID", "3fee1c11-7cdf-44b4-a1b0-5183408e1d89")

# ---------------- GLOBAL VARIABLES ----------------
_cached_token = None
_token_expiry = 0  # UNIX timestamp


# ---------------- ACCESS TOKEN ----------------
def get_access_token() -> str:
    global _cached_token, _token_expiry

    # –•—ç—Ä–≤—ç—ç token —Ö“Ø—á–∏–Ω—Ç—ç–π –±–∞–π–≤–∞–ª cache-–∞–∞—Å –±—É—Ü–∞–∞–Ω–∞
    if _cached_token and time.time() < _token_expiry - 10:
        return _cached_token

    url = f"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token"
    headers = { "Content-Type": "application/x-www-form-urlencoded" }
    data = {
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "scope": "https://graph.microsoft.com/.default",
        "grant_type": "client_credentials"
    }

    response = requests.post(url, headers=headers, data=data)
    if response.status_code != 200:
        print("‚ùå Access token –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
        print("Status code:", response.status_code)
        print("Response:", response.text)
        raise Exception("Access token –∞–≤–∞—Ö–∞–¥ –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª–ª–æ–æ")

    token_data = response.json()
    _cached_token = token_data["access_token"]
    _token_expiry = time.time() + token_data.get("expires_in", 3600)

    return _cached_token


# ---------------- USER SEARCH CLASS ----------------
class MicrosoftUsersAPI:
    def __init__(self, access_token: str):
        self.base_url = "https://graph.microsoft.com/v1.0"
        self.headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }

    def search_user_by_email(self, email: str) -> Optional[Dict]:
        """–ò-–º—ç–π–ª—ç—ç—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á —Ö–∞–π—Ö"""
        url = f"{self.base_url}/users"
        params = {
            "$filter": f"mail eq '{email}'",
            "$select": "id,displayName,mail,jobTitle,department,accountEnabled"
        }
        
        response = requests.get(url, headers=self.headers, params=params)
        
        if response.status_code != 200:
            print(f"‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á —Ö–∞–π—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
            print("Status code:", response.status_code)
            print("Response:", response.text)
            return None
        
        users = response.json().get("value", [])
        return users[0] if users else None

    def get_user_manager(self, user_id: str) -> Optional[Dict]:
        """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω manager-–∏–π–≥ –æ–ª–æ—Ö"""
        url = f"{self.base_url}/users/{user_id}/manager"
        
        response = requests.get(url, headers=self.headers)
        
        if response.status_code == 404:
            print("‚ÑπÔ∏è –≠–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ manager —Ç–æ—Ö–∏—Ä—É—É–ª–∞–≥–¥–∞–∞–≥“Ø–π –±–∞–π–Ω–∞")
            return None
        elif response.status_code != 200:
            print(f"‚ùå Manager —Ö–∞–π—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
            print("Status code:", response.status_code)
            print("Response:", response.text)
            return None
        
        return response.json()

    def print_user_info(self, user: Dict, title: str = "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª"):
        """–ù—ç–≥ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö—ç–≤–ª—ç—Ö"""
        print(f"\n{title}:")
        print("-" * 50)
        print(f"–ù—ç—Ä: {user.get('displayName', 'N/A')}")
        print(f"–ò-–º—ç–π–ª: {user.get('mail', 'N/A')}")
        print(f"–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª: {user.get('jobTitle', 'N/A')}")
        print(f"–•—ç–ª—Ç—ç—Å: {user.get('department', 'N/A')}")
        print(f"ID: {user.get('id', 'N/A')}")
        print(f"Account enabled: {'‚úÖ Yes' if user.get('accountEnabled', True) else '‚ùå No'}")

    def print_users_info(self, users: List[Dict], search_term: str = ""):
        """–•—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö—ç–≤–ª—ç—Ö (–∑”©–≤—Ö”©–Ω –∏–¥—ç–≤—Ö—Ç—ç–π account)"""
        if not users:
            print(f"‚ùå '{search_term}' –∞–ª–±–∞–Ω —Ç—É—à–∞–∞–ª—Ç–∞–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return
        
        # –ó”©–≤—Ö”©–Ω accountEnabled = true –±–∞–π–≥–∞–∞ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–≥ —à“Ø“Ø—Ö
        active_users = [user for user in users if user.get('accountEnabled', True)]
        
        if not active_users:
            print(f"‚ùå '{search_term}' –∞–ª–±–∞–Ω —Ç—É—à–∞–∞–ª—Ç–∞–π –∏–¥—ç–≤—Ö—Ç—ç–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return
        
        print(f"‚úÖ '{search_term}' —Ö–∞–π–ª—Ç–∞–∞—Ä {len(active_users)} –∏–¥—ç–≤—Ö—Ç—ç–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥–ª–æ–æ:")
        print("-" * 80)
        
        for i, user in enumerate(active_users, 1):
            account_enabled = user.get('accountEnabled', True)
            print(f"{i}. {user.get('displayName', '–ù—ç—Ä–≥“Ø–π')}")
            print(f"   –ò-–º—ç–π–ª: {user.get('mail', 'N/A')}")
            print(f"   –ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª: {user.get('jobTitle', 'N/A')}")
            print(f"   –•—ç–ª—Ç—ç—Å: {user.get('Department', 'N/A')}")
            print(f"   ID: {user.get('id', 'N/A')}")
            print(f"   Account enabled: {'‚úÖ Yes' if account_enabled else '‚ùå No'}")
            print("-" * 40)


# ---------------- MANAGER LOOKUP FUNCTIONS FOR APP.PY ----------------
def get_user_manager_id(user_email: str) -> Optional[str]:
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω manager-–∏–π–Ω ID-–≥ –∞–≤–∞—Ö (app.py-–¥ –∞—à–∏–≥–ª–∞—Ö)"""
    try:
        token = get_access_token()
        users_api = MicrosoftUsersAPI(token)
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ –æ–ª–æ—Ö
        user = users_api.search_user_by_email(user_email)
        if not user:
            print(f"‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π: {user_email}")
            return None
        
        # Manager-–∏–π–≥ –æ–ª–æ—Ö
        manager = users_api.get_user_manager(user.get('id'))
        if not manager:
            print(f"‚ùå Manager –æ–ª–¥—Å–æ–Ω–≥“Ø–π: {user_email}")
            return None
        
        return manager.get('id')
        
    except Exception as e:
        print(f"‚ùå Manager —Ö–∞–π—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}")
        return None

def get_user_manager_info(user_email: str) -> Optional[Dict]:
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω manager-–∏–π–Ω –±“Ø—Ö –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞–≤–∞—Ö (app.py-–¥ –∞—à–∏–≥–ª–∞—Ö)"""
    try:
        token = get_access_token()
        users_api = MicrosoftUsersAPI(token)
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ –æ–ª–æ—Ö
        user = users_api.search_user_by_email(user_email)
        if not user:
            print(f"‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π: {user_email}")
            return None
        
        # Manager-–∏–π–≥ –æ–ª–æ—Ö
        manager = users_api.get_user_manager(user.get('id'))
        if not manager:
            print(f"‚ùå Manager –æ–ª–¥—Å–æ–Ω–≥“Ø–π: {user_email}")
            return None
        
        return manager
        
    except Exception as e:
        print(f"‚ùå Manager —Ö–∞–π—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}")
        return None


# ---------------- MAIN ----------------
def main():
    token = get_access_token()
    users_api = MicrosoftUsersAPI(token)
    
    print("üîç –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω manager —Ö–∞–π—Ö —Å–∏—Å—Ç–µ–º")
    print("=" * 50)
    
    # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∏-–º—ç–π–ª —ç—Å–≤—ç–ª –Ω—ç—Ä –æ—Ä—É—É–ª–∞—Ö
    user_input = input("–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∏-–º—ç–π–ª –æ—Ä—É—É–ª–Ω–∞ —É—É: ").strip()
    
    if not user_input:
        print("‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞")
        return
    
    # –ò-–º—ç–π–ª —ç—Å–≤—ç–ª –Ω—ç—Ä—ç—ç—Ä —Ö–∞–π—Ö
    user = None
    if '@' in user_input:
        # –ò-–º—ç–π–ª –±–∞–π–Ω–∞
        user = users_api.search_user_by_email(user_input)
    
    if not user:
        print(f"‚ùå '{user_input}' —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
        return
    
    # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞—Ä—É—É–ª–∞—Ö
    users_api.print_user_info(user, "–û–ª–¥—Å–æ–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á")
    
    # Manager —Ö–∞–π—Ö
    print(f"\nüîç {user.get('displayName')}-–∏–π–Ω manager-–∏–π–≥ —Ö–∞–π–∂ –±–∞–π–Ω–∞...")
    manager = users_api.get_user_manager(user.get('id'))
    
    if manager:
        users_api.print_user_info(manager, "Manager")
    else:
        print("‚ÑπÔ∏è –≠–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ manager —Ç–æ—Ö–∏—Ä—É—É–ª–∞–≥–¥–∞–∞–≥“Ø–π –±–∞–π–Ω–∞")
    
if __name__ == "__main__":
    main()