import os
import logging
from flask import Flask, request, jsonify
from botbuilder.core import BotFrameworkAdapter, BotFrameworkAdapterSettings, TurnContext
from botbuilder.schema import Activity
import asyncio
import json
from botbuilder.schema import ConversationReference
import re
from datetime import datetime
import uuid

# Logging —Ç–æ—Ö–∏—Ä–≥–æ–æ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot Framework —Ç–æ—Ö–∏—Ä–≥–æ–æ
app_id = os.getenv("MICROSOFT_APP_ID", "")
app_password = os.getenv("MICROSOFT_APP_PASSWORD", "")

logger.info(f"Bot starting with App ID: {app_id[:10]}..." if app_id else "No App ID")

SETTINGS = BotFrameworkAdapterSettings(app_id, app_password)
ADAPTER = BotFrameworkAdapter(SETTINGS)

app = Flask(__name__)

# –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω conversation reference —Ö–∞–¥–≥–∞–ª–∞—Ö directory “Ø“Ø—Å–≥—ç—Ö
CONVERSATION_DIR = "conversations"
LEAVE_REQUESTS_DIR = "leave_requests"

for directory in [CONVERSATION_DIR, LEAVE_REQUESTS_DIR]:
    if not os.path.exists(directory):
        os.makedirs(directory)

# Approval —Ö–∏–π—Ö —Ö“Ø–Ω–∏–π –º—ç–¥—ç—ç–ª—ç–ª (Bayarmunkh)
APPROVER_EMAIL = "bayarmunkh@fibo.cloud"
APPROVER_USER_ID = "29:1kIuFRh3SgMXCUqtZSJBjHDaDmVF7l2-zXmi3qZNRBokdrt8QxiwyVPutdFsMKMp1R-tF52PqrhmqHegty9X2JA"

def create_approval_card(request_data):
    """Approval-—ã–Ω —Ç—É–ª–¥ adaptive card “Ø“Ø—Å–≥—ç—Ö"""
    card = {
        "type": "AdaptiveCard",
        "version": "1.4",
        "body": [
            {
                "type": "TextBlock",
                "text": "üèñÔ∏è –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç",
                "weight": "bolder",
                "size": "large",
                "color": "accent"
            },
            {
                "type": "FactSet",
                "facts": [
                    {
                        "title": "–•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á:",
                        "value": request_data.get("requester_name", "N/A")
                    },
                    {
                        "title": "–≠—Ö–ª—ç—Ö ”©–¥”©—Ä:",
                        "value": request_data.get("start_date", "N/A")
                    },
                    {
                        "title": "–î—É—É—Å–∞—Ö ”©–¥”©—Ä:",
                        "value": request_data.get("end_date", "N/A")
                    },
                    {
                        "title": "–•–æ–Ω–æ–≥–∏–π–Ω —Ç–æ–æ:",
                        "value": str(request_data.get("days", "N/A"))
                    },
                    {
                        "title": "–®–∞–ª—Ç–≥–∞–∞–Ω:",
                        "value": request_data.get("reason", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
                    }
                ]
            }
        ],
        "actions": [
            {
                "type": "Action.Submit",
                "title": "‚úÖ –ó”©–≤—à”©”©—Ä”©—Ö",
                "data": {
                    "action": "approve",
                    "request_id": request_data.get("request_id")
                },
                "style": "positive"
            },
            {
                "type": "Action.Submit", 
                "title": "‚ùå –¢–∞—Ç–≥–∞–ª–∑–∞—Ö",
                "data": {
                    "action": "reject",
                    "request_id": request_data.get("request_id")
                },
                "style": "destructive"
            }
        ]
    }
    return card

def save_leave_request(request_data):
    """–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö"""
    try:
        request_id = request_data["request_id"]
        filename = f"{LEAVE_REQUESTS_DIR}/request_{request_id}.json"
        
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(request_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"Saved leave request {request_id}")
        return True
    except Exception as e:
        logger.error(f"Failed to save leave request: {str(e)}")
        return False

def load_leave_request(request_id):
    """–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —É–Ω—à–∏—Ö"""
    try:
        filename = f"{LEAVE_REQUESTS_DIR}/request_{request_id}.json"
        
        if not os.path.exists(filename):
            return None
        
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Failed to load leave request {request_id}: {str(e)}")
        return None

def save_conversation_reference(activity):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω conversation reference –±–æ–ª–æ–Ω –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö —Ñ—É–Ω–∫—Ü"""
    try:
        reference = TurnContext.get_conversation_reference(activity)
        user_id = activity.from_property.id if activity.from_property else "unknown"
        conversation_id = activity.conversation.id if activity.conversation else "unknown"
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª —Ü—É–≥–ª—É—É–ª–∞—Ö
        user_info = {
            "user_id": user_id,
            "conversation_id": conversation_id,
            "user_name": getattr(activity.from_property, 'name', None) if activity.from_property else None,
            "email": None,
            "last_activity": activity.timestamp.isoformat() if activity.timestamp else None,
            "channel_id": activity.channel_id,
            "service_url": activity.service_url,
            "conversation_reference": reference.serialize()
        }
        
        # –ú—ç–π–ª —Ö–∞—è–≥ –æ–ª–æ—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ (Teams-—ç—ç—Å –∏—Ö—ç–≤—á–ª—ç–Ω name –¥–æ—Ç–æ—Ä –±–∞–π–¥–∞–≥)
        if activity.from_property and activity.from_property.name:
            name = activity.from_property.name
            # –ú—ç–π–ª —Ö–∞—è–≥ —à–∏–≥ —Ö–∞—Ä–∞–≥–¥–∞—Ö —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
            if "@" in name and "." in name:
                user_info["email"] = name
                # User name-–≥ –º—ç–π–ª—ç—ç—Å —Å–∞–ª–≥–∞–∂ –∞–≤–∞—Ö
                if " <" in name:
                    user_info["user_name"] = name.split(" <")[0]
                    user_info["email"] = name.split(" <")[1].rstrip(">")
                elif "<" in name and ">" in name:
                    user_info["email"] = name.split("<")[1].split(">")[0]
            else:
                # –ú—ç–π–ª —Ö–∞—è–≥ –±–∞–π—Ö–≥“Ø–π –±–æ–ª display name-–∞–∞—Å “Ø“Ø—Å–≥—ç—Ö
                # "Tuvshinjargal Enkhtaivan" -> "tuvshinjargal@fibo.cloud"
                user_info["user_name"] = name
                if name and name.strip():
                    # –≠—Ö–Ω–∏–π “Ø–≥–∏–π–≥ –∞–≤—á –∂–∏–∂–∏–≥ “Ø—Å—ç–≥ –±–æ–ª–≥–æ—Ö
                    first_name = name.strip().split()[0].lower()
                    # –¢—É—Å–≥–∞–π —Ç—ç–º–¥—ç–≥—Ç“Ø“Ø–¥–∏–π–≥ –∞—Ä–∏–ª–≥–∞—Ö
                    first_name = re.sub(r'[^a-zA-Z0-9]', '', first_name)
                    user_info["email"] = f"{first_name}@fibo.cloud"
        
        # Additional Azure AD properties —à–∞–ª–≥–∞—Ö
        if hasattr(activity.from_property, 'aad_object_id'):
            user_info["aad_object_id"] = activity.from_property.aad_object_id
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ID-—ç—ç—Ä —Ñ–∞–π–ª—ã–Ω –Ω—ç—Ä “Ø“Ø—Å–≥—ç—Ö (special characters-—ç—ç—Å –∑–∞–π–ª—Å—Ö–∏–π—Ö)
        safe_user_id = user_id.replace(":", "_").replace("/", "_").replace("\\", "_")
        filename = f"{CONVERSATION_DIR}/user_{safe_user_id}.json"
        
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(user_info, f, ensure_ascii=False, indent=2)
        
        logger.info(f"Saved conversation reference for user {user_id} (email: {user_info.get('email', 'N/A')}) to {filename}")
        return filename
    except Exception as e:
        logger.error(f"Failed to save conversation reference: {str(e)}")
        return None

def load_conversation_reference(user_id):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω conversation reference-–≥ —É–Ω—à–∏—Ö —Ñ—É–Ω–∫—Ü"""
    try:
        safe_user_id = user_id.replace(":", "_").replace("/", "_").replace("\\", "_")
        filename = f"{CONVERSATION_DIR}/user_{safe_user_id}.json"
        
        if not os.path.exists(filename):
            logger.error(f"Conversation file not found for user {user_id}")
            return None
        
        with open(filename, "r", encoding="utf-8") as f:
            user_info = json.load(f)
        
        # –•—É—É—á–∏–Ω —Ñ–æ—Ä–º–∞—Ç —à–∞–ª–≥–∞—Ö (–∑”©–≤—Ö”©–Ω conversation_reference –±–∞–π—Ö)
        if "conversation_reference" in user_info:
            return ConversationReference().deserialize(user_info["conversation_reference"])
        else:
            # –•—É—É—á–∏–Ω —Ñ–æ—Ä–º–∞—Ç –±–∞–π–Ω–∞ –≥—ç–∂ “Ø–∑—ç–∂
            return ConversationReference().deserialize(user_info)
    except Exception as e:
        logger.error(f"Failed to load conversation reference for user {user_id}: {str(e)}")
        return None

def load_user_info(user_id):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ä—ç–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —É–Ω—à–∏—Ö —Ñ—É–Ω–∫—Ü"""
    try:
        safe_user_id = user_id.replace(":", "_").replace("/", "_").replace("\\", "_")
        filename = f"{CONVERSATION_DIR}/user_{safe_user_id}.json"
        
        if not os.path.exists(filename):
            return None
        
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Failed to load user info for {user_id}: {str(e)}")
        return None

def list_all_users():
    """–•–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω –±“Ø—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –≥–∞—Ä–≥–∞—Ö"""
    try:
        users = []
        for filename in os.listdir(CONVERSATION_DIR):
            if filename.startswith("user_") and filename.endswith(".json"):
                user_id = filename[5:-5].replace("_", ":")  # user_ prefix –±–æ–ª–æ–Ω .json suffix –∞—Ä–∏–ª–≥–∞—Ö
                user_info = load_user_info(user_id)
                if user_info:
                    # –•—É—É—á–∏–Ω —Ñ–æ—Ä–º–∞—Ç —à–∞–ª–≥–∞—Ö
                    if "user_id" in user_info:
                        users.append({
                            "user_id": user_info.get("user_id", user_id),
                            "email": user_info.get("email"),
                            "user_name": user_info.get("user_name"),
                            "last_activity": user_info.get("last_activity"),
                            "channel_id": user_info.get("channel_id")
                        })
                    else:
                        # –•—É—É—á–∏–Ω —Ñ–æ—Ä–º–∞—Ç - –∑”©–≤—Ö”©–Ω user_id –Ω—ç–º—ç—Ö
                        users.append({
                            "user_id": user_id,
                            "email": None,
                            "user_name": None,
                            "last_activity": None,
                            "channel_id": None
                        })
                else:
                    users.append({
                        "user_id": user_id,
                        "email": None,
                        "user_name": None,
                        "last_activity": None,
                        "channel_id": None
                    })
        return users
    except Exception as e:
        logger.error(f"Failed to list users: {str(e)}")
        return []

@app.route("/", methods=["GET"])
def health_check():
    return jsonify({
        "status": "running",
        "message": "Flask Bot Server is running",
        "endpoints": ["/api/messages", "/proactive-message", "/users", "/broadcast", "/leave-request", "/approval-callback"],
        "app_id_configured": bool(os.getenv("MICROSOFT_APP_ID")),
        "stored_users": len(list_all_users())
    })

@app.route("/users", methods=["GET"])
def get_users():
    """–•–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç"""
    users = list_all_users()
    return jsonify({"users": users, "count": len(users)})

@app.route("/leave-request", methods=["POST"])
def submit_leave_request():
    """–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞—Ö"""
    try:
        data = request.json
        requester_email = data.get("requester_email")
        start_date = data.get("start_date")
        end_date = data.get("end_date")
        days = data.get("days")
        reason = data.get("reason", "–•—É–≤–∏–π–Ω —à–∞–∞—Ä–¥–ª–∞–≥–∞")

        if not all([requester_email, start_date, end_date, days]):
            return jsonify({"error": "Missing required fields: requester_email, start_date, end_date, days"}), 400

        # –•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–æ—Ö
        requester_info = None
        for user in list_all_users():
            if user["email"] == requester_email:
                requester_info = user
                break

        if not requester_info:
            return jsonify({"error": f"User with email {requester_email} not found"}), 404

        # –•“Ø—Å—ç–ª—Ç–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –±—ç–ª—Ç–≥—ç—Ö
        request_id = str(uuid.uuid4())
        request_data = {
            "request_id": request_id,
            "requester_email": requester_email,
            "requester_name": requester_info.get("user_name", requester_email),
            "requester_user_id": requester_info["user_id"],
            "start_date": start_date,
            "end_date": end_date,
            "days": days,
            "reason": reason,
            "status": "pending",
            "created_at": datetime.now().isoformat(),
            "approver_email": APPROVER_EMAIL,
            "approver_user_id": APPROVER_USER_ID
        }

        # –•“Ø—Å—ç–ª—Ç —Ö–∞–¥–≥–∞–ª–∞—Ö
        if not save_leave_request(request_data):
            return jsonify({"error": "Failed to save leave request"}), 500

        # Approval card “Ø“Ø—Å–≥—ç—Ö
        approval_card = create_approval_card(request_data)

        # Approver —Ä—É—É adaptive card –∏–ª–≥—ç—ç—Ö
        approver_conversation = load_conversation_reference(APPROVER_USER_ID)
        if not approver_conversation:
            return jsonify({"error": "Approver conversation reference not found"}), 404

        async def send_approval_card(context: TurnContext):
            await context.send_activity({
                "type": "message",
                "text": f"–®–∏–Ω—ç —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç: {requester_info.get('user_name', requester_email)}",
                "attachments": [{
                    "contentType": "application/vnd.microsoft.card.adaptive",
                    "content": approval_card
                }]
            })

        asyncio.run(
            ADAPTER.continue_conversation(
                approver_conversation,
                send_approval_card,
                app_id
            )
        )

        # –•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á —Ä—É—É –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
        requester_conversation = load_conversation_reference(requester_info["user_id"])
        if requester_conversation:
            async def send_confirmation(context: TurnContext):
                await context.send_activity(f"‚úÖ –¢–∞–Ω—ã —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç!\nüìÖ {start_date} - {end_date} ({days} —Ö–æ–Ω–æ–≥)\n‚è≥ –ó”©–≤—à”©”©—Ä”©–ª–∏–π–Ω —Ö“Ø–ª—ç—ç–ª–≥—ç–¥ –±–∞–π–Ω–∞...")

            asyncio.run(
                ADAPTER.continue_conversation(
                    requester_conversation,
                    send_confirmation,
                    app_id
                )
            )

        logger.info(f"Leave request {request_id} submitted by {requester_email}")
        return jsonify({
            "status": "success",
            "request_id": request_id,
            "message": "Leave request submitted successfully"
        }), 200

    except Exception as e:
        logger.error(f"Leave request error: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/api/messages", methods=["POST"])
def process_messages():
    try:
        logger.info("Received message request")
        if not request.is_json:
            logger.error("Request is not JSON")
            return jsonify({"error": "Content-Type must be application/json"}), 400

        body = request.get_json()
        logger.info(f"Request body: {body}")

        if not body:
            logger.error("Empty request body")
            return jsonify({"error": "Request body is required"}), 400

        try:
            activity = Activity().deserialize(body)
            logger.info(f"Activity type: {activity.type}, text: {activity.text}")
        except Exception as e:
            logger.error(f"Failed to deserialize activity: {str(e)}")
            return jsonify({"error": f"Invalid activity format: {str(e)}"}), 400

        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω conversation reference —Ö–∞–¥–≥–∞–ª–∞—Ö
        save_conversation_reference(activity)

        async def logic(context: TurnContext):
            try:
                if activity.type == "message":
                    # Adaptive card action —à–∞–ª–≥–∞—Ö
                    if activity.value:
                        # Adaptive card submit action
                        action_data = activity.value
                        await handle_adaptive_card_action(context, action_data)
                    else:
                        # –ï—Ä–¥–∏–π–Ω –º–µ—Å—Å–µ–∂
                        user_text = activity.text or "No text provided"
                        user_id = activity.from_property.id if activity.from_property else "unknown"
                        logger.info(f"Processing message from user {user_id}: {user_text}")
                        await context.send_activity(f"–¢–∞–Ω—ã –º–µ—Å—Å–µ–∂–∏–π–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞: {user_text}")
                else:
                    logger.info(f"Non-message activity type: {activity.type}")
            except Exception as e:
                logger.error(f"Error in logic function: {str(e)}")
                await context.send_activity(f"–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞: {str(e)}")

        try:
            auth_header = request.headers.get('Authorization', '')
            logger.info(f"Auth header present: {bool(auth_header)}")
            asyncio.run(ADAPTER.process_activity(activity, auth_header, logic))
            logger.info("Message processed successfully")
            return jsonify({"status": "success"}), 200
        except Exception as e:
            logger.error(f"Adapter processing error: {str(e)}")
            return jsonify({"error": f"Bot framework error: {str(e)}"}), 500

    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        return jsonify({"error": f"Internal server error: {str(e)}"}), 500

async def handle_adaptive_card_action(context: TurnContext, action_data):
    """Adaptive card action-—É—É–¥—ã–≥ handle —Ö–∏–π—Ö"""
    try:
        action = action_data.get("action")
        request_id = action_data.get("request_id")
        
        if not action or not request_id:
            await context.send_activity("‚ùå –ê–ª–¥–∞–∞—Ç–∞–π —Ö“Ø—Å—ç–ª—Ç")
            return

        # Leave request –º—ç–¥—ç—ç–ª—ç–ª —É–Ω—à–∏—Ö
        request_data = load_leave_request(request_id)
        if not request_data:
            await context.send_activity("‚ùå –•“Ø—Å—ç–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return

        # Approval status —à–∏–Ω—ç—á–ª—ç—Ö
        if action == "approve":
            request_data["status"] = "approved"
            request_data["approved_at"] = datetime.now().isoformat()
            request_data["approved_by"] = context.activity.from_property.id
            
            # –•“Ø—Å—ç–ª—Ç —Ö–∞–¥–≥–∞–ª–∞—Ö
            save_leave_request(request_data)
            
            # Approver —Ä—É—É –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö
            await context.send_activity(f"‚úÖ –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –∑”©–≤—à”©”©—Ä”©–≥–¥–ª”©”©!\nüë§ {request_data['requester_name']}\nüìÖ {request_data['start_date']} - {request_data['end_date']}")
            
            # –•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á —Ä—É—É –º—ç–¥—ç–≥–¥—ç—Ö
            requester_conversation = load_conversation_reference(request_data["requester_user_id"])
            if requester_conversation:
                async def notify_approval(ctx: TurnContext):
                    await ctx.send_activity(f"üéâ –¢–∞–Ω—ã —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –∑”©–≤—à”©”©—Ä”©–≥–¥–ª”©”©!\nüìÖ {request_data['start_date']} - {request_data['end_date']} ({request_data['days']} —Ö–æ–Ω–æ–≥)\n‚ú® –°–∞–π—Ö–∞–Ω –∞–º—Ä–∞–ª—Ç–∞–∞!")

                asyncio.run(
                    ADAPTER.continue_conversation(
                        requester_conversation,
                        notify_approval,
                        app_id
                    )
                )
            
        elif action == "reject":
            request_data["status"] = "rejected"
            request_data["rejected_at"] = datetime.now().isoformat()
            request_data["rejected_by"] = context.activity.from_property.id
            
            # –•“Ø—Å—ç–ª—Ç —Ö–∞–¥–≥–∞–ª–∞—Ö
            save_leave_request(request_data)
            
            # Approver —Ä—É—É –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö
            await context.send_activity(f"‚ùå –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç —Ç–∞—Ç–≥–∞–ª–∑–∞–≥–¥–ª–∞–∞\nüë§ {request_data['requester_name']}\nüìÖ {request_data['start_date']} - {request_data['end_date']}")
            
            # –•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á —Ä—É—É –º—ç–¥—ç–≥–¥—ç—Ö
            requester_conversation = load_conversation_reference(request_data["requester_user_id"])
            if requester_conversation:
                async def notify_rejection(ctx: TurnContext):
                    await ctx.send_activity(f"‚ùå –¢–∞–Ω—ã —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç —Ç–∞—Ç–≥–∞–ª–∑–∞–≥–¥–ª–∞–∞\nüìÖ {request_data['start_date']} - {request_data['end_date']} ({request_data['days']} —Ö–æ–Ω–æ–≥)\nüí¨ –ù—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª–ª–∏–π–Ω —Ö—ç—Ä—ç–≥—Ç—ç–π –±–æ–ª —É–¥–∏—Ä–¥–ª–∞–≥–∞—Ç–∞–π–≥–∞–∞ —è—Ä–∏–ª—Ü–∞–Ω–∞ —É—É.")

                asyncio.run(
                    ADAPTER.continue_conversation(
                        requester_conversation,
                        notify_rejection,
                        app_id
                    )
                )

        logger.info(f"Leave request {request_id} {action}d by {context.activity.from_property.id}")
        
    except Exception as e:
        logger.error(f"Error handling adaptive card action: {str(e)}")
        await context.send_activity(f"‚ùå –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}")

@app.route("/proactive-message", methods=["POST"])
def proactive_message():
    data = request.json
    message_text = data.get("message", "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!")
    user_id = data.get("user_id")  # –¢–æ–¥–æ—Ä—Ö–æ–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á —Ä“Ø“Ø –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
    
    try:
        if user_id:
            # –¢–æ–¥–æ—Ä—Ö–æ–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á —Ä“Ø“Ø –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
            conversation_reference = load_conversation_reference(user_id)
            if not conversation_reference:
                return jsonify({"error": f"User {user_id} not found"}), 404
        else:
            # –•—É—É—á–∏–Ω –∞—Ä–≥–∞: conversation_reference.json —Ñ–∞–π–ª–∞–∞—Å —É–Ω—à–∏—Ö
            try:
                with open("conversation_reference.json", "r", encoding="utf-8") as f:
                    ref_data = json.load(f)
                conversation_reference = ConversationReference().deserialize(ref_data)
            except FileNotFoundError:
                return jsonify({"error": "No conversation reference found. Please specify user_id or ensure at least one user has messaged the bot."}), 404
        
        # –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π log
        logger.info("=== Proactive message info ===")
        logger.info(f"User ID: {conversation_reference.user.id}")
        logger.info(f"User Name: {getattr(conversation_reference.user, 'name', None)}")
        logger.info(f"Conversation ID: {conversation_reference.conversation.id}")
        logger.info(f"Conversation Type: {getattr(conversation_reference.conversation, 'conversation_type', None)}")
        logger.info(f"Service URL: {conversation_reference.service_url}")
        logger.info(f"Bot ID: {conversation_reference.bot.id}")
        logger.info(f"Tenant ID: {getattr(conversation_reference.conversation, 'tenant_id', None)}")
        logger.info(f"Channel ID: {conversation_reference.channel_id}")
        logger.info(f"Message to send: {message_text}")
        
        async def send_proactive(context: TurnContext):
            await context.send_activity(message_text)
        
        asyncio.run(
            ADAPTER.continue_conversation(
                conversation_reference,
                send_proactive,
                app_id
            )
        )
        logger.info("Proactive message sent successfully")
        return jsonify({"status": "ok", "user_id": conversation_reference.user.id}), 200
    except Exception as e:
        logger.error(f"Proactive message error: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/broadcast", methods=["POST"])
def broadcast_message():
    """–ë“Ø—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á —Ä“Ø“Ø –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö"""
    data = request.json
    message_text = data.get("message", "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!")
    
    users = list_all_users()
    if not users:
        return jsonify({"error": "No users found"}), 404
    
    results = []
    for user_info in users:
        user_id = user_info["user_id"]
        try:
            conversation_reference = load_conversation_reference(user_id)
            if conversation_reference:
                async def send_proactive(context: TurnContext):
                    await context.send_activity(message_text)
                
                asyncio.run(
                    ADAPTER.continue_conversation(
                        conversation_reference,
                        send_proactive,
                        app_id
                    )
                )
                results.append({
                    "user_id": user_id,
                    "email": user_info.get("email"),
                    "user_name": user_info.get("user_name"),
                    "status": "success"
                })
                logger.info(f"Message sent to user {user_id} ({user_info.get('email', 'No email')})")
            else:
                results.append({
                    "user_id": user_id,
                    "email": user_info.get("email"),
                    "user_name": user_info.get("user_name"),
                    "status": "failed",
                    "error": "Reference not found"
                })
        except Exception as e:
            results.append({
                "user_id": user_id,
                "email": user_info.get("email"),
                "user_name": user_info.get("user_name"),
                "status": "failed",
                "error": str(e)
            })
            logger.error(f"Failed to send message to user {user_id}: {str(e)}")
    
    return jsonify({"results": results, "total_users": len(users), "message": message_text}), 200

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 error: {str(error)}")
    return jsonify({"error": "Internal server error"}), 500

@app.route("/approval-callback", methods=["POST"])
def approval_callback():
    """Adaptive card approval callback (backup endpoint)"""
    try:
        data = request.json
        action = data.get("action")
        request_id = data.get("request_id")
        
        logger.info(f"Approval callback: {action} for request {request_id}")
        
        return jsonify({"status": "received", "action": action, "request_id": request_id}), 200
    except Exception as e:
        logger.error(f"Approval callback error: {str(e)}")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    logger.info(f"Starting Flask app on port {port}")
    app.run(host="0.0.0.0", port=port, debug=True)