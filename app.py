import os
import logging
from flask import Flask, request, jsonify
from botbuilder.core import BotFrameworkAdapter, BotFrameworkAdapterSettings, TurnContext, MessageFactory
from botbuilder.schema import Activity, Attachment
import asyncio
import json
from botbuilder.schema import ConversationReference
import re
from datetime import datetime, timedelta
import uuid
import openai
from openai import OpenAI
from config import Config

# Logging —Ç–æ—Ö–∏—Ä–≥–æ–æ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# OpenAI —Ç–æ—Ö–∏—Ä–≥–æ–æ
openai_client = OpenAI(
    api_key=Config.OPENAI_API_KEY if hasattr(Config, 'OPENAI_API_KEY') else os.getenv("OPENAI_API_KEY", "")
)

# Bot Framework —Ç–æ—Ö–∏—Ä–≥–æ–æ
app_id = os.getenv("MICROSOFT_APP_ID", "")
app_password = os.getenv("MICROSOFT_APP_PASSWORD", "")

logger.info(f"Bot starting with App ID: {app_id[:10]}..." if app_id else "No App ID")

SETTINGS = BotFrameworkAdapterSettings(app_id, app_password)
ADAPTER = BotFrameworkAdapter(SETTINGS)

app = Flask(__name__)

# –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω conversation reference —Ö–∞–¥–≥–∞–ª–∞—Ö directory “Ø“Ø—Å–≥—ç—Ö
CONVERSATION_DIR = "conversations"
LEAVE_REQUESTS_DIR = "leave_requests"
PENDING_CONFIRMATIONS_DIR = "pending_confirmations"

for directory in [CONVERSATION_DIR, LEAVE_REQUESTS_DIR, PENDING_CONFIRMATIONS_DIR]:
    if not os.path.exists(directory):
        os.makedirs(directory)

# Approval —Ö–∏–π—Ö —Ö“Ø–Ω–∏–π –º—ç–¥—ç—ç–ª—ç–ª (Bayarmunkh)
APPROVER_EMAIL = "bayarmunkh@fibo.cloud"
APPROVER_USER_ID = "29:1kIuFRh3SgMXCUqtZSJBjHDaDmVF7l2-zXmi3qZNRBokdrt8QxiwyVPutdFsMKMp1R-tF52PqrhmqHegty9X2JA"

def create_approval_card(request_data):
    """Approval-—ã–Ω —Ç—É–ª–¥ adaptive card “Ø“Ø—Å–≥—ç—Ö"""
    card = {
        "type": "AdaptiveCard",
        "version": "1.4",
        "body": [
            {
                "type": "TextBlock",
                "text": "üèñÔ∏è –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç",
                "weight": "bolder",
                "size": "large",
                "color": "accent"
            },
            {
                "type": "FactSet",
                "facts": [
                    {
                        "title": "–•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á:",
                        "value": request_data.get("requester_name", "N/A")
                    },
                    {
                        "title": "–≠—Ö–ª—ç—Ö ”©–¥”©—Ä:",
                        "value": request_data.get("start_date", "N/A")
                    },
                    {
                        "title": "–î—É—É—Å–∞—Ö ”©–¥”©—Ä:",
                        "value": request_data.get("end_date", "N/A")
                    },
                    {
                        "title": "–•–æ–Ω–æ–≥–∏–π–Ω —Ç–æ–æ:",
                        "value": str(request_data.get("days", "N/A"))
                    },
                    {
                        "title": "–¶–∞–≥–∏–π–Ω —Ç–æ–æ:",
                        "value": f"{request_data.get('inactive_hours', 'N/A')} —Ü–∞–≥"
                    },
                    {
                        "title": "–®–∞–ª—Ç–≥–∞–∞–Ω:",
                        "value": request_data.get("reason", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
                    }
                ]
            }
        ],
        "actions": [
            {
                "type": "Action.Submit",
                "title": "‚úÖ –ó”©–≤—à”©”©—Ä”©—Ö",
                "data": {
                    "action": "approve",
                    "request_id": request_data.get("request_id")
                },
                "style": "positive"
            },
            {
                "type": "Action.Submit", 
                "title": "‚ùå –¢–∞—Ç–≥–∞–ª–∑–∞—Ö",
                "data": {
                    "action": "reject",
                    "request_id": request_data.get("request_id")
                },
                "style": "destructive"
            }
        ]
    }
    return card

def save_leave_request(request_data):
    """–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö"""
    try:
        request_id = request_data["request_id"]
        filename = f"{LEAVE_REQUESTS_DIR}/request_{request_id}.json"
        
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(request_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"Saved leave request {request_id}")
        return True
    except Exception as e:
        logger.error(f"Failed to save leave request: {str(e)}")
        return False

def load_leave_request(request_id):
    """–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —É–Ω—à–∏—Ö"""
    try:
        filename = f"{LEAVE_REQUESTS_DIR}/request_{request_id}.json"
        
        if not os.path.exists(filename):
            return None
        
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Failed to load leave request {request_id}: {str(e)}")
        return None

def is_leave_request(text):
    """–ú–µ—Å—Å–µ–∂ –Ω—å —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö"""
    leave_keywords = [
        '—á”©–ª”©”©', '–∞–º—Ä–∞–ª—Ç', 'leave', 'vacation', 'holiday',
        '—á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç', '–∞–º—Ä–∞–ª—Ç—ã–Ω —Ö“Ø—Å—ç–ª—Ç', '—á”©–ª”©”© –∞–≤–∞—Ö',
        '–∞–º—Ä–∞—Ö', '—á”©–ª”©”©—Ç—ç–π –±–∞–π—Ö', '–∞–º—Ä–∞–ª—Ç–∞–Ω–¥ —è–≤–∞—Ö'
    ]
    
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in leave_keywords)

def parse_leave_request(text, user_name):
    """ChatGPT-4 –∞—à–∏–≥–ª–∞–∂ —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –æ–π–ª–≥–æ—Ö"""
    try:
        if not openai_client.api_key:
            logger.warning("OpenAI API key not configured, falling back to simple parsing")
            return parse_leave_request_simple(text, user_name)
        
        # ”®–Ω”©”©–¥—Ä–∏–π–Ω –æ–≥–Ω–æ–æ–≥ AI-–¥ ”©–≥”©—Ö
        today = datetime.now()
        today_str = today.strftime("%Y-%m-%d")
        tomorrow = today + timedelta(days=1)
        tomorrow_str = tomorrow.strftime("%Y-%m-%d")
        
        prompt = f"""
–¢–∞ —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö —Ç—É—Å–ª–∞—Ö —é–º. –î–æ–æ—Ä—Ö –º–µ—Å—Å–µ–∂—ç—ç—Å database.Absence struct-–¥ –æ—Ä—É—É–ª–∞—Ö –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –≥–∞—Ä–≥–∞–∂, JSON —Ö—ç–ª–±—ç—Ä—ç—ç—Ä –±—É—Ü–∞–∞.

”®–ù”®”®–î–†–ò–ô–ù –û–ì–ù–û–û: {today_str} ({today.strftime("%A")})
–ú–ê–†–ì–ê–ê–®–ò–ô–ù –û–ì–ù–û–û: {tomorrow_str} ({tomorrow.strftime("%A")})

–•—ç—Ä—ç–≥–ª—ç–≥—á: {user_name}
–ú–µ—Å—Å–µ–∂: "{text}"

Database schema (Go struct):
type Absence struct {{
    StartDate     time.Time
    Reason        string
    EmployeeID    uint
    InActiveHours int
    Status        string
}}

–ì–∞—Ä–≥–∞—Ö —ë—Å—Ç–æ–π –º—ç–¥—ç—ç–ª—ç–ª:
- start_date: –≠—Ö–ª—ç—Ö –æ–≥–Ω–æ–æ (YYYY-MM-DD —Ñ–æ—Ä–º–∞—Ç)
- end_date: –î—É—É—Å–∞—Ö –æ–≥–Ω–æ–æ (YYYY-MM-DD —Ñ–æ—Ä–º–∞—Ç) 
- reason: –®–∞–ª—Ç–≥–∞–∞–Ω (string)
- employee_id: –ê–∂–∏–ª—Ç–Ω—ã ID (–∑–∞—Å–≤–∞—Ä —Ö–∏–π—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞–≥“Ø–π, backend –¥—ç—ç—Ä —Ç–æ—Ö–∏—Ä—É—É–ª–Ω–∞)
- inactive_hours: –ò–¥—ç–≤—Ö–≥“Ø–π —Ü–∞–≥–∏–π–Ω —Ç–æ–æ (–¶–ê–ê–ì–ê–ê–† —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö)
- status: –¢”©–ª”©–≤ (default: "pending")
- needs_clarification: –ù—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö (true/false)
- questions: –•—ç—Ä—ç–≤ needs_clarification true –±–æ–ª –∞—Å—É—É—Ö –∞—Å—É—É–ª—Ç—É—É–¥

–ß–£–•–ê–õ –î“Æ–†–≠–ú:
- "–ú–ê–†–ì–ê–ê–®" = {tomorrow_str}
- "”®–ù”®”®–î”®–†" = {today_str}
- "–•–û–Å–† ”®–î–†–ò–ô–ù –î–ê–†–ê–ê" = {(today + timedelta(days=2)).strftime("%Y-%m-%d")}
- "–≠–ù–≠ –î–û–õ–û–û –•–û–ù–û–ì" = –æ–¥–æ–æ–≥–∏–π–Ω –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥—Ç
- "–î–ê–†–ê–ê–ì–ò–ô–ù –î–û–õ–û–û –•–û–ù–û–ì" = –¥–∞—Ä–∞–∞–≥–∏–π–Ω –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥—Ç

–¶–ê–ì–ò–ô–ù –¢–û–û–¶–û–û–õ–û–õ:
- "1 –•–û–ù–û–ì" = 8 —Ü–∞–≥
- "0.5 –•–û–ù–û–ì" —ç—Å–≤—ç–ª "–•–ê–ì–ê–° –•–û–ù–û–ì" = 4 —Ü–∞–≥
- "2 –¶–ê–ì" = 2 —Ü–∞–≥
- "3 –¶–ê–ì" = 3 —Ü–∞–≥
- "4 –¶–ê–ì" = 4 —Ü–∞–≥
- "”®–ì–õ”®”®–Ω–∏–π –¶–ê–ì" —ç—Å–≤—ç–ª "”®–ì–õ”®”®" = 4 —Ü–∞–≥
- "“Æ–î–≠–≠–° –•–û–ô–®" —ç—Å–≤—ç–ª "“Æ–î–ò–ô–ù –¶–ê–ì" = 4 —Ü–∞–≥

–û–ì–ù–û–û–ù–´ –î“Æ–†–≠–ú:
- –•—ç—Ä—ç–≤ inactive_hours < 8 (—Ü–∞–≥–∏–π–Ω —á”©–ª”©”©) –±–æ–ª start_date = end_date (—Ç—ç—Ä ”©–¥”©—Ä –ª)
- –•—ç—Ä—ç–≤ inactive_hours >= 8 (—Ö–æ–Ω–æ–≥–∏–π–Ω —á”©–ª”©”©) –±–æ–ª end_date = start_date + (—Ö–æ–Ω–æ–≥–∏–π–Ω —Ç–æ–æ - 1)
- –•—ç—Ä—ç–≤ –æ–≥–Ω–æ–æ —Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π –±–æ–ª —Ç–æ–¥–æ—Ä—Ö–æ–π –±–æ–ª–∂ –∞—Å—É—É—Ö
- –•—ç—Ä—ç–≤ —Ü–∞–≥/—Ö–æ–Ω–æ–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π –±–æ–ª 8 —Ü–∞–≥ (1 —Ö–æ–Ω–æ–≥) –≥—ç–∂ “Ø–∑—ç—Ö
- –•—ç—Ä—ç–≤ —à–∞–ª—Ç–≥–∞–∞–Ω –±–∞–π—Ö–≥“Ø–π –±–æ–ª "–•—É–≤–∏–π–Ω —à–∞–∞—Ä–¥–ª–∞–≥–∞" –≥—ç–∂ “Ø–∑—ç—Ö
- Status “Ø—Ä–≥—ç–ª–∂ "pending" –±–∞–π–Ω–∞
- –•—ç—Ä—ç–≤ –º—ç–¥—ç—ç–ª—ç–ª –¥—É—Ç—É—É –±–æ–ª needs_clarification = true –±–æ–ª–≥–æ–∂ –∞—Å—É—É–ª—Ç—É—É–¥ –Ω—ç–º—ç—Ö

”®–ù”®”®–î–†–ò–ô–ù –û–ì–ù–û–û ({today_str})-–∏–π–≥ “Ø–Ω–¥—ç—Å–ª—ç–Ω —Ç–æ–æ—Ü–æ–æ–ª —Ö–∏–π–Ω—ç “Ø“Ø!

JSON –±—É—Ü–∞–∞:
"""

        response = openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": f"–¢–∞ —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö —Ç—É—Å–ª–∞—Ö. –ú–æ–Ω–≥–æ–ª —Ö—ç–ª –¥—ç—ç—Ä—Ö –±–∞–π–≥–∞–ª–∏–π–Ω —Ö—ç–ª–∏–π–≥ –æ–π–ª–≥–æ–∂, database.Absence struct-–¥ —Ç–æ—Ö–∏—Ä–æ—Ö –±“Ø—Ç—Ü–ª—ç–≥–¥—Å—ç–Ω –º—ç–¥—ç—ç–ª—ç–ª –≥–∞—Ä–≥–∞–¥–∞–≥. ”®–ù”®”®–î–†–ò–ô–ù –û–ì–ù–û–û: {today_str}. '–ú–∞—Ä–≥–∞–∞—à' –≥—ç—Å—ç–Ω “Ø–≥ {tomorrow_str} –≥—ç—Å—ç–Ω “Ø–≥ —é–º."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.1,
            max_tokens=500
        )
        
        ai_response = response.choices[0].message.content.strip()
        logger.info(f"AI response: {ai_response}")
        
        # JSON –ø–∞—Ä—Å–∞—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ
        try:
            # JSON –∫–æ–¥—ã–Ω —Ö—ç—Å–≥–∏–π–≥ –æ–ª–æ—Ö
            import re
            json_match = re.search(r'\{.*\}', ai_response, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                parsed_data = json.loads(json_str)
                
                # Default —É—Ç–≥—É—É–¥ —à–∞–ª–≥–∞—Ö
                today = datetime.now()
                if not parsed_data.get('start_date'):
                    parsed_data['start_date'] = today.strftime("%Y-%m-%d")
                if not parsed_data.get('reason'):
                    parsed_data['reason'] = "–•—É–≤–∏–π–Ω —à–∞–∞—Ä–¥–ª–∞–≥–∞"
                if not parsed_data.get('status'):
                    parsed_data['status'] = "pending"
                if not parsed_data.get('inactive_hours'):
                    # Default 1 —Ö–æ–Ω–æ–≥ = 8 —Ü–∞–≥
                    parsed_data['inactive_hours'] = 8
                
                # –•—É—É—á–∏–Ω —Å–∏—Å—Ç–µ–º—Ç—ç–π –Ω–∏–π—Ü“Ø“Ø–ª—ç—Ö
                parsed_data['requester_name'] = user_name
                
                # –•–æ–Ω–æ–≥–∏–π–Ω —Ç–æ–æ –∑”©–≤ —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
                inactive_hours = parsed_data.get('inactive_hours', 8)
                if inactive_hours < 8:
                    # –¶–∞–≥–∏–π–Ω —á”©–ª”©”© - 1 ”©–¥”©—Ä
                    parsed_data['days'] = 1
                else:
                    # –•–æ–Ω–æ–≥–∏–π–Ω —á”©–ª”©”© - —Ü–∞–≥–∞–∞—Ä —Ö—É–≤–∞–∞—Ö
                    parsed_data['days'] = max(1, inactive_hours // 8)
                
                # End date —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
                if not parsed_data.get('end_date'):
                    start_date = datetime.strptime(parsed_data['start_date'], "%Y-%m-%d")
                    
                    if inactive_hours < 8:
                        # –¶–∞–≥–∏–π–Ω —á”©–ª”©”© - —Ç—ç—Ä ”©–¥”©—Ä –ª
                        end_date = start_date
                    else:
                        # –•–æ–Ω–æ–≥–∏–π–Ω —á”©–ª”©”© - —Ö–æ–Ω–æ–≥–∏–π–Ω —Ç–æ–æ–≥–æ–æ—Ä —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
                        end_date = start_date + timedelta(days=parsed_data['days'] - 1)
                    
                    parsed_data['end_date'] = end_date.strftime("%Y-%m-%d")
                
                return parsed_data
            else:
                logger.error("No JSON found in AI response")
                return parse_leave_request_simple(text, user_name)
                
        except json.JSONDecodeError as e:
            logger.error(f"Failed to parse AI JSON response: {e}")
            return parse_leave_request_simple(text, user_name)
            
    except Exception as e:
        logger.error(f"AI parsing error: {str(e)}")
        return parse_leave_request_simple(text, user_name)

def parse_leave_request_simple(text, user_name):
    """–≠–Ω–≥–∏–π–Ω regex –∞—à–∏–≥–ª–∞—Ö fallback —Ñ—É–Ω–∫—Ü"""
    
    # ”®–Ω”©”©–¥—Ä–∏–π–Ω –æ–≥–Ω–æ–æ –æ–ª–æ—Ö
    today = datetime.now()
    
    # –¶–∞–≥ –±–∞ —Ö–æ–Ω–æ–≥–∏–π–Ω —Ç–æ–æ –æ–ª–æ—Ö
    text_lower = text.lower()
    
    # –¶–∞–≥–∏–π–Ω —Ç–æ–æ —à–∞–ª–≥–∞—Ö
    hours_match = re.search(r'(\d+)\s*(?:—Ü–∞–≥|—á–∞—Å|hour)', text_lower)
    
    # –•–æ–Ω–æ–≥–∏–π–Ω —Ç–æ–æ —à–∞–ª–≥–∞—Ö
    days_match = re.search(r'(\d+)\s*(?:—Ö–æ–Ω–æ–≥|”©–¥”©—Ä|day)', text_lower)
    
    # –•–∞–≥–∞—Å —Ö–æ–Ω–æ–≥ —à–∞–ª–≥–∞—Ö
    half_day_patterns = ['—Ö–∞–≥–∞—Å —Ö–æ–Ω–æ–≥', '0.5 —Ö–æ–Ω–æ–≥', '—Ö–∞–≥–∞—Å ”©–¥”©—Ä', '”©–≥–ª”©”©', '“Ø–¥—ç—ç—Å —Ö–æ–π—à', '“Ø–¥–∏–π–Ω —Ü–∞–≥']
    is_half_day = any(pattern in text_lower for pattern in half_day_patterns)
    
    # –¶–∞–≥–∏–π–Ω —Ç–æ–æ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö
    if hours_match:
        inactive_hours = int(hours_match.group(1))
        days = max(1, inactive_hours // 8) if inactive_hours >= 8 else 1  # –•–∞–º–≥–∏–π–Ω –±–∞–≥–∞–¥–∞–∞ 1 ”©–¥”©—Ä
    elif is_half_day:
        inactive_hours = 4
        days = 1
    elif days_match:
        days = int(days_match.group(1))
        inactive_hours = days * 8
    else:
        # Default - 1 —Ö–æ–Ω–æ–≥
        days = 1
        inactive_hours = 8
    
    # Start date —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö
    if '–º–∞—Ä–≥–∞–∞—à' in text_lower:
        start_date_obj = today + timedelta(days=1)
    elif '”©–Ω”©”©–¥”©—Ä' in text_lower:
        start_date_obj = today
    elif '—Ö–æ—ë—Ä ”©–¥—Ä–∏–π–Ω –¥–∞—Ä–∞–∞' in text_lower:
        start_date_obj = today + timedelta(days=2)
    elif '–≥—É—Ä–∞–≤ ”©–¥—Ä–∏–π–Ω –¥–∞—Ä–∞–∞' in text_lower or '3 ”©–¥—Ä–∏–π–Ω –¥–∞—Ä–∞–∞' in text_lower:
        start_date_obj = today + timedelta(days=3)
    else:
        # Default - ”©–Ω”©”©–¥”©—Ä
        start_date_obj = today
    
    start_date = start_date_obj.strftime("%Y-%m-%d")
    
    # End date —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö - –ó”®–í–•”®–ù days-–∞–∞—Ä —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
    if inactive_hours < 8:
        # –¶–∞–≥–∏–π–Ω —á”©–ª”©”© –±–æ–ª —Ç—ç—Ä ”©–¥”©—Ä –ª
        end_date_obj = start_date_obj
    else:
        # –•–æ–Ω–æ–≥–∏–π–Ω —á”©–ª”©”© - —ç—Ö–ª—ç—Ö ”©–¥—Ä”©”©—Å —Ö—ç–¥—ç–Ω —Ö–æ–Ω–æ–≥ –Ω—ç–º—ç—Ö
        end_date_obj = start_date_obj + timedelta(days=days-1)
    
    end_date = end_date_obj.strftime("%Y-%m-%d")
    
    # –®–∞–ª—Ç–≥–∞–∞–Ω –≥–∞—Ä–≥–∞—Ö
    reason_keywords = ['—É—á–∏—Ä', '—à–∞–ª—Ç–≥–∞–∞–Ω', 'because', 'reason', 'for']
    reason = "–•—É–≤–∏–π–Ω —à–∞–∞—Ä–¥–ª–∞–≥–∞"
    
    for keyword in reason_keywords:
        if keyword in text.lower():
            parts = text.lower().split(keyword)
            if len(parts) > 1:
                reason = parts[1].strip()[:100]  # –≠—Ö–Ω–∏–π 100 —Ç—ç–º–¥—ç–≥—Ç
                break
    
    return {
        "requester_name": user_name,
        "start_date": start_date,
        "end_date": end_date, 
        "days": days,
        "reason": reason,
        "inactive_hours": inactive_hours,
        "status": "pending",
        "needs_clarification": False,
        "questions": []
    }

async def handle_leave_request_message(context: TurnContext, text, user_id, user_name):
    """–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö"""
    try:
        # –•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–æ—Ö
        requester_info = None
        for user in list_all_users():
            if user["user_id"] == user_id:
                requester_info = user
                break
        
        if not requester_info:
            await context.send_activity("‚ùå –¢–∞–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –≠—Ö–ª—ç—ç–¥ bot-—Ç–∞–π —á–∞—Ç–ª–∞–Ω–∞ —É—É.")
            return
        
        # –ú–µ—Å—Å–µ–∂—ç—ç—Å –º—ç–¥—ç—ç–ª—ç–ª –≥–∞—Ä–≥–∞—Ö
        parsed_data = parse_leave_request(text, user_name or requester_info.get("user_name", "Unknown"))
        
        # –•“Ø—Å—ç–ª—Ç–∏–π–Ω ID “Ø“Ø—Å–≥—ç—Ö
        request_id = str(uuid.uuid4())
        
        # –•“Ø—Å—ç–ª—Ç–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –±—ç–ª—Ç–≥—ç—Ö
        request_data = {
            "request_id": request_id,
            "requester_email": requester_info.get("email"),
            "requester_name": parsed_data["requester_name"],
            "requester_user_id": user_id,
            "start_date": parsed_data["start_date"],
            "end_date": parsed_data["end_date"],
            "days": parsed_data["days"],
            "reason": parsed_data["reason"],
            "inactive_hours": parsed_data.get("inactive_hours", parsed_data["days"] * 8),
            "status": parsed_data.get("status", "pending"),
            "original_message": text,
            "created_at": datetime.now().isoformat(),
            "approver_email": APPROVER_EMAIL,
            "approver_user_id": APPROVER_USER_ID
        }
        
        # –•“Ø—Å—ç–ª—Ç —Ö–∞–¥–≥–∞–ª–∞—Ö
        save_leave_request(request_data)
        
        # –•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á–∏–¥ —Ö–∞—Ä–∏—É–ª–∞—Ö
        await context.send_activity(f"‚úÖ –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞!\nüìÖ {parsed_data['start_date']} - {parsed_data['end_date']} ({parsed_data['days']} —Ö–æ–Ω–æ–≥)\nüí≠ {parsed_data['reason']}\n‚è≥ –ó”©–≤—à”©”©—Ä”©–ª–∏–π–Ω —Ö“Ø–ª—ç—ç–ª–≥—ç–¥ –±–∞–π–Ω–∞...")
        
        # Bayarmunkh —Ä—É—É adaptive card –∏–ª–≥—ç—ç—Ö
        approval_card = create_approval_card(request_data)
        approver_conversation = load_conversation_reference(APPROVER_USER_ID)
        
        if approver_conversation:
            async def send_approval_card(ctx: TurnContext):
                adaptive_card_attachment = Attachment(
                    content_type="application/vnd.microsoft.card.adaptive",
                    content=approval_card
                )
                message = MessageFactory.attachment(adaptive_card_attachment)
                message.text = f"üì© –®–∏–Ω—ç —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç: {request_data['requester_name']}\nüí¨ –ê–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂: \"{text}\""
                await ctx.send_activity(message)
            
            await ADAPTER.continue_conversation(
                approver_conversation,
                send_approval_card,
                app_id
            )
            logger.info(f"Leave request {request_id} sent to approver")
        else:
            logger.warning(f"Approver conversation reference not found for leave request {request_id}")
            # Approver-—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ–∂ —á–∞–¥–∞—Ö–≥“Ø–π –±–∞–π–≥–∞–∞ —Ç—É–ª —Ö“Ø—Å—ç–ª—Ç —Ö–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω –≥—ç–¥–≥–∏–π–≥ –º—ç–¥—ç–≥–¥—ç—Ö
            await context.send_activity("‚ö†Ô∏è –ó”©–≤—à”©”©—Ä”©–≥—á bot-—Ç–∞–π —Ö–∞—Ä–∞–∞—Ö–∞–Ω —Ö–æ–ª–±–æ–≥–¥–æ–æ–≥“Ø–π –±–∞–π–Ω–∞. –•“Ø—Å—ç–ª—Ç —Ö–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω –±–æ–ª–æ–≤—á –∑”©–≤—à”©”©—Ä”©–≥—á—Ç—ç–π —à—É—É–¥ —Ö–æ–ª–±–æ–≥–¥–æ–Ω–æ —É—É.")
        
        logger.info(f"Leave request {request_id} created from message by {user_id}")
        
    except Exception as e:
        logger.error(f"Error handling leave request message: {str(e)}")
        await context.send_activity(f"‚ùå –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}")

async def forward_message_to_admin(text, user_name, user_id):
    """–ï—Ä–¥–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ –∞–¥–º–∏–Ω–¥ adaptive card-—Ç–∞–π –¥–∞–º–∂—É—É–ª–∞—Ö"""
    try:        
        approver_conversation = load_conversation_reference(APPROVER_USER_ID)
        
        if approver_conversation:
            # –≠–Ω–≥–∏–π–Ω –º–µ—Å—Å–µ–∂—ç—ç—Å —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç “Ø“Ø—Å–≥—ç—Ö
            parsed_data = parse_leave_request(text, user_name)
            
            # –•—ç—Ä—ç–≤ AI –Ω—å –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª —Ö—ç—Ä—ç–≥—Ç—ç–π –≥—ç–∂ “Ø–∑–≤—ç–ª
            if parsed_data.get('needs_clarification', False):
                questions = parsed_data.get('questions', [])
                if questions:
                    # –•—ç—Ä—ç–≥–ª—ç–≥—á—ç—ç—Å –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª –∞—Å—É—É—Ö
                    question_text = "ü§î –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª —Ö—ç—Ä—ç–≥—Ç—ç–π –±–∞–π–Ω–∞:\n\n"
                    for i, question in enumerate(questions, 1):
                        question_text += f"{i}. {question}\n"
                    question_text += "\n–î–∞—Ö–∏–Ω –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç–∂ –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª ”©–≥–Ω”© “Ø“Ø."
                    
                    # –•—ç—Ä—ç–≥–ª—ç–≥—á—ç—ç—Å –∞—Å—É—É–ª—Ç –∞—Å—É—É—Ö –ª–æ–≥–∏–∫ –Ω—ç–º—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π
                    # –û–¥–æ–æ–≥–æ–æ—Ä –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω–¥ –º—ç–¥—ç–≥–¥—ç—Ö
                    async def notify_admin_clarification(ctx: TurnContext):
                        await ctx.send_activity(f"‚ùì {user_name} –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª —Ö—ç—Ä—ç–≥—Ç—ç–π:\nüí¨ –ê–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂: \"{text}\"\nü§î –ê—Å—É—É–ª—Ç—É—É–¥: {', '.join(questions)}")
                    
                    await ADAPTER.continue_conversation(
                        approver_conversation,
                        notify_admin_clarification,
                        app_id
                    )
                    logger.info(f"Clarification needed message sent to admin from {user_id}")
                    return
            
            request_id = str(uuid.uuid4())
            
            # –•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–æ—Ö
            requester_info = None
            all_users = list_all_users()
            
            for user in all_users:
                if user["user_id"] == user_id:
                    requester_info = user
                    break
            
            # –•“Ø—Å—ç–ª—Ç–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –±—ç–ª—Ç–≥—ç—Ö
            request_data = {
                "request_id": request_id,
                "requester_email": requester_info.get("email") if requester_info else "unknown@fibo.cloud",
                "requester_name": user_name,
                "requester_user_id": user_id,
                "start_date": parsed_data["start_date"],
                "end_date": parsed_data.get("end_date"),
                "days": parsed_data["days"],
                "reason": parsed_data["reason"],
                "inactive_hours": parsed_data.get("inactive_hours", parsed_data["days"] * 8),
                "status": parsed_data.get("status", "pending"),
                "original_message": text,
                "created_at": datetime.now().isoformat(),
                "approver_email": APPROVER_EMAIL,
                "approver_user_id": APPROVER_USER_ID
            }
            
            # –•“Ø—Å—ç–ª—Ç —Ö–∞–¥–≥–∞–ª–∞—Ö
            save_leave_request(request_data)
            
            # Adaptive card “Ø“Ø—Å–≥—ç—Ö
            approval_card = create_approval_card(request_data)
            
            async def notify_admin_with_card(ctx: TurnContext):
                adaptive_card_attachment = Attachment(
                    content_type="application/vnd.microsoft.card.adaptive",
                    content=approval_card
                )
                message = MessageFactory.attachment(adaptive_card_attachment)
                message.text = f"üì® –®–∏–Ω—ç –º–µ—Å—Å–µ–∂: {user_name}\nüí¨ –ê–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂: \"{text}\"\nü§ñ AI –æ–π–ª–≥–æ–ª—Ç: {parsed_data.get('days')} —Ö–æ–Ω–æ–≥, {parsed_data.get('reason')}"
                await ctx.send_activity(message)
            
            await ADAPTER.continue_conversation(
                approver_conversation,
                notify_admin_with_card,
                app_id
            )
            logger.info(f"Message with adaptive card forwarded to admin from {user_id}")
        else:
            logger.warning(f"Approver conversation reference not found. Approver needs to message the bot first.")
            # Approver conversation –±–∞–π—Ö–≥“Ø–π —Ç—É–ª –º–µ—Å—Å–µ–∂–∏–π–≥ log-–¥ —Ö–∞–¥–≥–∞–ª–Ω–∞
            logger.info(f"Pending message for admin: {user_name} said: {text}")
    except Exception as e:
        logger.error(f"Error forwarding message to admin: {str(e)}")
        import traceback
        logger.error(f"Full traceback: {traceback.format_exc()}")

def save_conversation_reference(activity):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω conversation reference –±–æ–ª–æ–Ω –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö —Ñ—É–Ω–∫—Ü"""
    try:
        reference = TurnContext.get_conversation_reference(activity)
        user_id = activity.from_property.id if activity.from_property else "unknown"
        conversation_id = activity.conversation.id if activity.conversation else "unknown"
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª —Ü—É–≥–ª—É—É–ª–∞—Ö
        user_info = {
            "user_id": user_id,
            "conversation_id": conversation_id,
            "user_name": getattr(activity.from_property, 'name', None) if activity.from_property else None,
            "email": None,
            "last_activity": activity.timestamp.isoformat() if activity.timestamp else None,
            "channel_id": activity.channel_id,
            "service_url": activity.service_url,
            "conversation_reference": reference.serialize(),
            "conversation_details": {
                "conversation_id": activity.conversation.id if activity.conversation else None,
                "conversation_type": getattr(activity.conversation, 'conversation_type', None) if activity.conversation else None,
                "tenant_id": getattr(activity.conversation, 'tenant_id', None) if activity.conversation else None,
                "is_group": getattr(activity.conversation, 'is_group', None) if activity.conversation else None,
                "name": getattr(activity.conversation, 'name', None) if activity.conversation else None
            }
        }
        
        # –ú—ç–π–ª —Ö–∞—è–≥ –æ–ª–æ—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ (Teams-—ç—ç—Å –∏—Ö—ç–≤—á–ª—ç–Ω name –¥–æ—Ç–æ—Ä –±–∞–π–¥–∞–≥)
        if activity.from_property and activity.from_property.name:
            name = activity.from_property.name
            # –ú—ç–π–ª —Ö–∞—è–≥ —à–∏–≥ —Ö–∞—Ä–∞–≥–¥–∞—Ö —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
            if "@" in name and "." in name:
                user_info["email"] = name
                # User name-–≥ –º—ç–π–ª—ç—ç—Å —Å–∞–ª–≥–∞–∂ –∞–≤–∞—Ö
                if " <" in name:
                    user_info["user_name"] = name.split(" <")[0]
                    user_info["email"] = name.split(" <")[1].rstrip(">")
                elif "<" in name and ">" in name:
                    user_info["email"] = name.split("<")[1].split(">")[0]
            else:
                # –ú—ç–π–ª —Ö–∞—è–≥ –±–∞–π—Ö–≥“Ø–π –±–æ–ª display name-–∞–∞—Å “Ø“Ø—Å–≥—ç—Ö
                # "Tuvshinjargal Enkhtaivan" -> "tuvshinjargal@fibo.cloud"
                user_info["user_name"] = name
                if name and name.strip():
                    # –≠—Ö–Ω–∏–π “Ø–≥–∏–π–≥ –∞–≤—á –∂–∏–∂–∏–≥ “Ø—Å—ç–≥ –±–æ–ª–≥–æ—Ö
                    first_name = name.strip().split()[0].lower()
                    # –¢—É—Å–≥–∞–π —Ç—ç–º–¥—ç–≥—Ç“Ø“Ø–¥–∏–π–≥ –∞—Ä–∏–ª–≥–∞—Ö
                    first_name = re.sub(r'[^a-zA-Z0-9]', '', first_name)
                    user_info["email"] = f"{first_name}@fibo.cloud"
        
        # Additional Azure AD properties —à–∞–ª–≥–∞—Ö
        if hasattr(activity.from_property, 'aad_object_id'):
            user_info["aad_object_id"] = activity.from_property.aad_object_id
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ID-—ç—ç—Ä —Ñ–∞–π–ª—ã–Ω –Ω—ç—Ä “Ø“Ø—Å–≥—ç—Ö (special characters-—ç—ç—Å –∑–∞–π–ª—Å—Ö–∏–π—Ö)
        safe_user_id = user_id.replace(":", "_").replace("/", "_").replace("\\", "_")
        filename = f"{CONVERSATION_DIR}/user_{safe_user_id}.json"
        
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(user_info, f, ensure_ascii=False, indent=2)
        
        logger.info(f"Saved conversation reference for user {user_id} (email: {user_info.get('email', 'N/A')}) to {filename}")
        return filename
    except Exception as e:
        logger.error(f"Failed to save conversation reference: {str(e)}")
        return None

def load_conversation_reference(user_id):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω conversation reference-–≥ —É–Ω—à–∏—Ö —Ñ—É–Ω–∫—Ü"""
    try:
        safe_user_id = user_id.replace(":", "_").replace("/", "_").replace("\\", "_")
        filename = f"{CONVERSATION_DIR}/user_{safe_user_id}.json"
        
        if not os.path.exists(filename):
            logger.error(f"Conversation file not found for user {user_id}")
            return None
        
        with open(filename, "r", encoding="utf-8") as f:
            user_info = json.load(f)
        
        # –•—É—É—á–∏–Ω —Ñ–æ—Ä–º–∞—Ç —à–∞–ª–≥–∞—Ö (–∑”©–≤—Ö”©–Ω conversation_reference –±–∞–π—Ö)
        if "conversation_reference" in user_info:
            return ConversationReference().deserialize(user_info["conversation_reference"])
        else:
            # –•—É—É—á–∏–Ω —Ñ–æ—Ä–º–∞—Ç –±–∞–π–Ω–∞ –≥—ç–∂ “Ø–∑—ç–∂
            return ConversationReference().deserialize(user_info)
    except Exception as e:
        logger.error(f"Failed to load conversation reference for user {user_id}: {str(e)}")
        return None

def load_user_info(user_id):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ä—ç–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —É–Ω—à–∏—Ö —Ñ—É–Ω–∫—Ü"""
    try:
        safe_user_id = user_id.replace(":", "_").replace("/", "_").replace("\\", "_")
        filename = f"{CONVERSATION_DIR}/user_{safe_user_id}.json"
        
        if not os.path.exists(filename):
            return None
        
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Failed to load user info for {user_id}: {str(e)}")
        return None

def list_all_users():
    """–•–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω –±“Ø—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –≥–∞—Ä–≥–∞—Ö"""
    try:
        users = []
        for filename in os.listdir(CONVERSATION_DIR):
            if filename.startswith("user_") and filename.endswith(".json"):
                user_id = filename[5:-5].replace("_", ":")  # user_ prefix –±–æ–ª–æ–Ω .json suffix –∞—Ä–∏–ª–≥–∞—Ö
                user_info = load_user_info(user_id)
                if user_info:
                    # –•—É—É—á–∏–Ω —Ñ–æ—Ä–º–∞—Ç —à–∞–ª–≥–∞—Ö
                    if "user_id" in user_info:
                        users.append({
                            "user_id": user_info.get("user_id", user_id),
                            "email": user_info.get("email"),
                            "user_name": user_info.get("user_name"),
                            "last_activity": user_info.get("last_activity"),
                            "channel_id": user_info.get("channel_id"),
                            "conversation_id": user_info.get("conversation_id"),
                            "conversation_type": user_info.get("conversation_details", {}).get("conversation_type"),
                            "tenant_id": user_info.get("conversation_details", {}).get("tenant_id"),
                            "is_group": user_info.get("conversation_details", {}).get("is_group"),
                            "conversation_name": user_info.get("conversation_details", {}).get("name")
                        })
                    else:
                        # –•—É—É—á–∏–Ω —Ñ–æ—Ä–º–∞—Ç - –∑”©–≤—Ö”©–Ω user_id –Ω—ç–º—ç—Ö
                        users.append({
                            "user_id": user_id,
                            "email": None,
                            "user_name": None,
                            "last_activity": None,
                            "channel_id": None,
                            "conversation_id": None,
                            "conversation_type": None,
                            "tenant_id": None,
                            "is_group": None,
                            "conversation_name": None
                        })
                else:
                    users.append({
                        "user_id": user_id,
                        "email": None,
                        "user_name": None,
                        "last_activity": None,
                        "channel_id": None,
                        "conversation_id": None,
                        "conversation_type": None,
                        "tenant_id": None,
                        "is_group": None,
                        "conversation_name": None
                    })
        return users
    except Exception as e:
        logger.error(f"Failed to list users: {str(e)}")
        return []

def find_user_by_conversation_id(conversation_id):
    """Conversation ID-–∞–∞—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–æ—Ö"""
    for user in list_all_users():
        if user.get("conversation_id") == conversation_id:
            return user
    return None

@app.route("/", methods=["GET"])
def health_check():
    pending_confirmations = len([f for f in os.listdir(PENDING_CONFIRMATIONS_DIR) if f.startswith("pending_")]) if os.path.exists(PENDING_CONFIRMATIONS_DIR) else 0
    
    return jsonify({
        "status": "running",
        "message": "Flask Bot Server is running",
        "endpoints": ["/api/messages", "/proactive-message", "/users", "/broadcast", "/leave-request", "/approval-callback", "/send-by-conversation"],
        "app_id_configured": bool(os.getenv("MICROSOFT_APP_ID")),
        "stored_users": len(list_all_users()),
        "pending_confirmations": pending_confirmations
    })

@app.route("/users", methods=["GET"])
def get_users():
    """–•–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç"""
    users = list_all_users()
    return jsonify({"users": users, "count": len(users)})

@app.route("/leave-request", methods=["POST"])
def submit_leave_request():
    """–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞—Ö"""
    try:
        data = request.json
        requester_email = data.get("requester_email")
        start_date = data.get("start_date")
        end_date = data.get("end_date")
        days = data.get("days")
        reason = data.get("reason", "–•—É–≤–∏–π–Ω —à–∞–∞—Ä–¥–ª–∞–≥–∞")

        if not all([requester_email, start_date, end_date, days]):
            return jsonify({"error": "Missing required fields: requester_email, start_date, end_date, days"}), 400

        # –•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–æ—Ö
        requester_info = None
        for user in list_all_users():
            if user["email"] == requester_email:
                requester_info = user
                break

        if not requester_info:
            return jsonify({"error": f"User with email {requester_email} not found"}), 404

        # –•“Ø—Å—ç–ª—Ç–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –±—ç–ª—Ç–≥—ç—Ö
        request_id = str(uuid.uuid4())
        request_data = {
            "request_id": request_id,
            "requester_email": requester_email,
            "requester_name": requester_info.get("user_name", requester_email),
            "requester_user_id": requester_info["user_id"],
            "start_date": start_date,
            "end_date": end_date,
            "days": days,
            "reason": reason,
            "inactive_hours": days * 8,  # 8 —Ü–∞–≥–∏–π–Ω –∞–∂–ª—ã–Ω ”©–¥”©—Ä
            "status": "pending",
            "created_at": datetime.now().isoformat(),
            "approver_email": APPROVER_EMAIL,
            "approver_user_id": APPROVER_USER_ID
        }

        # –•“Ø—Å—ç–ª—Ç —Ö–∞–¥–≥–∞–ª–∞—Ö
        if not save_leave_request(request_data):
            return jsonify({"error": "Failed to save leave request"}), 500

        # Approval card “Ø“Ø—Å–≥—ç—Ö
        approval_card = create_approval_card(request_data)

        # Approver —Ä—É—É adaptive card –∏–ª–≥—ç—ç—Ö
        approver_conversation = load_conversation_reference(APPROVER_USER_ID)
        if not approver_conversation:
            return jsonify({"error": "Approver conversation reference not found"}), 404

        async def send_approval_card(context: TurnContext):
            adaptive_card_attachment = Attachment(
                content_type="application/vnd.microsoft.card.adaptive",
                content=approval_card
            )
            message = MessageFactory.attachment(adaptive_card_attachment)
            message.text = f"üì© –®–∏–Ω—ç —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç: {request_data['requester_name']}\nüí¨ –ê–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂: \"{text}\""
            await context.send_activity(message)

        asyncio.run(
            ADAPTER.continue_conversation(
                approver_conversation,
                send_approval_card,
                app_id
            )
        )

        # –•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á —Ä—É—É –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
        requester_conversation = load_conversation_reference(requester_info["user_id"])
        if requester_conversation:
            async def send_confirmation(context: TurnContext):
                await context.send_activity(f"‚úÖ –¢–∞–Ω—ã —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç!\nüìÖ {start_date} - {end_date} ({days} —Ö–æ–Ω–æ–≥)\n‚è≥ –ó”©–≤—à”©”©—Ä”©–ª–∏–π–Ω —Ö“Ø–ª—ç—ç–ª–≥—ç–¥ –±–∞–π–Ω–∞...")

            asyncio.run(
                ADAPTER.continue_conversation(
                    requester_conversation,
                    send_confirmation,
                    app_id
                )
            )

        logger.info(f"Leave request {request_id} submitted by {requester_email}")
        return jsonify({
            "status": "success",
            "request_id": request_id,
            "message": "Leave request submitted successfully"
        }), 200

    except Exception as e:
        logger.error(f"Leave request error: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/api/messages", methods=["POST"])
def process_messages():
    try:
        logger.info("Received message request")
        if not request.is_json:
            logger.error("Request is not JSON")
            return jsonify({"error": "Content-Type must be application/json"}), 400

        body = request.get_json()
        logger.info(f"Request body: {body}")

        if not body:
            logger.error("Empty request body")
            return jsonify({"error": "Request body is required"}), 400

        try:
            activity = Activity().deserialize(body)
            logger.info(f"Activity type: {activity.type}, text: {activity.text}")
        except Exception as e:
            logger.error(f"Failed to deserialize activity: {str(e)}")
            return jsonify({"error": f"Invalid activity format: {str(e)}"}), 400

        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω conversation reference —Ö–∞–¥–≥–∞–ª–∞—Ö
        save_conversation_reference(activity)

        async def logic(context: TurnContext):
            try:
                if activity.type == "message":
                    # Adaptive card action —à–∞–ª–≥–∞—Ö
                    if activity.value:
                        # Adaptive card submit action
                        action_data = activity.value
                        await handle_adaptive_card_action(context, action_data)
                    else:
                        # –ï—Ä–¥–∏–π–Ω –º–µ—Å—Å–µ–∂
                        user_text = activity.text or "No text provided"
                        user_id = activity.from_property.id if activity.from_property else "unknown"
                        user_name = getattr(activity.from_property, 'name', None) if activity.from_property else "Unknown User"
                        logger.info(f"Processing message from user {user_id}: {user_text}")
                        
                        # –ó”©–≤—Ö”©–Ω Bayarmunkh –±–∏—à —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
                        if user_id != APPROVER_USER_ID:
                            # –•—ç—Ä—ç–≤ —Ö—ç—Ä—ç–≥–ª—ç–≥—á—Ç—ç–π pending confirmation –±–∞–π–≤–∞–ª
                            pending_confirmation = load_pending_confirmation(user_id)
                            
                            if pending_confirmation:
                                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω —Ö–∞—Ä–∏—É —à–∞–ª–≥–∞—Ö
                                confirmation_response = is_confirmation_response(user_text)
                                
                                if confirmation_response == "approve":
                                    # –ó”©–≤—à”©”©—Ä—Å”©–Ω - –º–µ–Ω–µ–∂–µ—Ä —Ä—É—É –∏–ª–≥—ç—ç—Ö
                                    request_data = pending_confirmation["request_data"]
                                    
                                    # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —É—Å—Ç–≥–∞—Ö
                                    delete_pending_confirmation(user_id)
                                    
                                    # –•“Ø—Å—ç–ª—Ç —Ö–∞–¥–≥–∞–ª–∞—Ö
                                    save_leave_request(request_data)
                                    
                                    await context.send_activity("‚úÖ –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –±–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω!\nüì§ –ú–µ–Ω–µ–∂–µ—Ä —Ä—É—É –∏–ª–≥—ç—ç–≥–¥—ç–∂ –±–∞–π–Ω–∞...")
                                    
                                    # –ú–µ–Ω–µ–∂–µ—Ä —Ä—É—É –∏–ª–≥—ç—ç—Ö
                                    await send_approved_request_to_manager(request_data, user_text)
                                    
                                elif confirmation_response == "reject":
                                    # –¢–∞—Ç–≥–∞–ª–∑—Å–∞–Ω - –¥–∞—Ö–∏–Ω –æ—Ä—É—É–ª–∞—Ö—ã–≥ —Ö“Ø—Å—ç—Ö
                                    delete_pending_confirmation(user_id)
                                    await context.send_activity("‚ùå –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —Ü—É—Ü–ª–∞–≥–¥–ª–∞–∞.\n\nüîÑ –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç—ç—ç –¥–∞—Ö–∏–Ω –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø. –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª—Ç—ç–π –±–∏—á–Ω—ç “Ø“Ø.")
                                    
                                else:
                                    # –û–π–ª–≥–æ–º–∂–≥“Ø–π —Ö–∞—Ä–∏—É
                                    await context.send_activity('ü§î –û–π–ª–≥–æ—Å–æ–Ω–≥“Ø–π. "–¢–∏–π–º" —ç—Å–≤—ç–ª "“Æ–≥“Ø–π" –≥—ç–∂ —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É.\n\n‚Ä¢ **"–¢–∏–π–º"** - –ú–µ–Ω–µ–∂–µ—Ä —Ä—É—É –∏–ª–≥—ç—ç—Ö\n‚Ä¢ **"“Æ–≥“Ø–π"** - –ó–∞—Å–≤–∞—Ä–ª–∞—Ö')
                                
                                return
                            
                            # –®–∏–Ω—ç —Ö“Ø—Å—ç–ª—Ç - AI –∞—à–∏–≥–ª–∞–∂ parse —Ö–∏–π—Ö
                            parsed_data = parse_leave_request(user_text, user_name)
                            
                            # –•—ç—Ä—ç–≤ AI –Ω—å –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª —Ö—ç—Ä—ç–≥—Ç—ç–π –≥—ç–∂ “Ø–∑–≤—ç–ª
                            if parsed_data.get('needs_clarification', False):
                                questions = parsed_data.get('questions', [])
                                if questions:
                                    # –•—ç—Ä—ç–≥–ª—ç–≥—á—ç—ç—Å –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª –∞—Å—É—É—Ö
                                    question_text = "ü§î –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª —Ö—ç—Ä—ç–≥—Ç—ç–π –±–∞–π–Ω–∞:\n\n"
                                    for i, question in enumerate(questions, 1):
                                        question_text += f"{i}. {question}\n"
                                    question_text += "\n–î–∞—Ö–∏–Ω –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç–∂ –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª ”©–≥–Ω”© “Ø“Ø."
                                    
                                    await context.send_activity(question_text)
                                    logger.info(f"Asked clarification questions to user {user_id}")
                                    return
                            
                            # –ú—ç–¥—ç—ç–ª—ç–ª —Ö–∞–Ω–≥–∞–ª—Ç—Ç–∞–π - –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç –∞—Å—É—É—Ö
                            # Request data –±—ç–ª—Ç–≥—ç—Ö
                            request_id = str(uuid.uuid4())
                            
                            # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–æ—Ö
                            requester_info = None
                            all_users = list_all_users()
                            for user in all_users:
                                if user["user_id"] == user_id:
                                    requester_info = user
                                    break
                            
                            request_data = {
                                "request_id": request_id,
                                "requester_email": requester_info.get("email") if requester_info else "unknown@fibo.cloud",
                                "requester_name": user_name,
                                "requester_user_id": user_id,
                                "start_date": parsed_data["start_date"],
                                "end_date": parsed_data.get("end_date"),
                                "days": parsed_data["days"],
                                "reason": parsed_data["reason"],
                                "inactive_hours": parsed_data.get("inactive_hours", parsed_data["days"] * 8),
                                "status": parsed_data.get("status", "pending"),
                                "original_message": user_text,
                                "created_at": datetime.now().isoformat(),
                                "approver_email": APPROVER_EMAIL,
                                "approver_user_id": APPROVER_USER_ID
                            }
                            
                            # Pending confirmation —Ö–∞–¥–≥–∞–ª–∞—Ö
                            save_pending_confirmation(user_id, request_data)
                            
                            # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç –∞—Å—É—É—Ö
                            confirmation_message = create_confirmation_message(parsed_data)
                            await context.send_activity(confirmation_message)
                            
                            logger.info(f"Asked for confirmation from user {user_id}")
                            
                        else:
                            # Bayarmunkh ”©”©—Ä–∏–π–Ω –º–µ—Å—Å–µ–∂ - –∑”©–≤—Ö”©–Ω echo —Ö–∞—Ä–∏—É
                            await context.send_activity(f"–¢–∞–Ω—ã –º–µ—Å—Å–µ–∂–∏–π–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞: {user_text}")
                            logger.info(f"Skipping forwarding message to admin from approver himself: {user_id}")
                else:
                    logger.info(f"Non-message activity type: {activity.type}")
            except Exception as e:
                logger.error(f"Error in logic function: {str(e)}")
                await context.send_activity(f"–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞: {str(e)}")

        try:
            auth_header = request.headers.get('Authorization', '')
            logger.info(f"Auth header present: {bool(auth_header)}")
            asyncio.run(ADAPTER.process_activity(activity, auth_header, logic))
            logger.info("Message processed successfully")
            return jsonify({"status": "success"}), 200
        except Exception as e:
            logger.error(f"Adapter processing error: {str(e)}")
            return jsonify({"error": f"Bot framework error: {str(e)}"}), 500

    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        return jsonify({"error": f"Internal server error: {str(e)}"}), 500

async def handle_adaptive_card_action(context: TurnContext, action_data):
    """Adaptive card action-—É—É–¥—ã–≥ handle —Ö–∏–π—Ö"""
    try:
        action = action_data.get("action")
        request_id = action_data.get("request_id")
        
        if not action or not request_id:
            await context.send_activity("‚ùå –ê–ª–¥–∞–∞—Ç–∞–π —Ö“Ø—Å—ç–ª—Ç")
            return

        # Leave request –º—ç–¥—ç—ç–ª—ç–ª —É–Ω—à–∏—Ö
        request_data = load_leave_request(request_id)
        if not request_data:
            await context.send_activity("‚ùå –•“Ø—Å—ç–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return

        # Disabled card “Ø“Ø—Å–≥—ç—Ö
        def create_disabled_card(action_type):
            """–¢–æ–≤—á–Ω—É—É–¥ –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª—Å–æ–Ω card “Ø“Ø—Å–≥—ç—Ö"""
            if action_type == "approve":
                status_text = "‚úÖ –ó”®–í–®”®”®–†”®–ì–î–°”®–ù"
                status_color = "good"
            else:
                status_text = "‚ùå –¢–ê–¢–ì–ê–õ–ó–ê–ì–î–°–ê–ù"
                status_color = "attention"
            
            card = {
                "type": "AdaptiveCard",
                "version": "1.4",
                "body": [
                    {
                        "type": "TextBlock",
                        "text": "üèñÔ∏è –ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç",
                        "weight": "bolder",
                        "size": "large",
                        "color": "accent"
                    },
                    {
                        "type": "TextBlock",
                        "text": status_text,
                        "weight": "bolder",
                        "color": status_color,
                        "size": "medium"
                    },
                    {
                        "type": "FactSet",
                        "facts": [
                            {
                                "title": "–•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á:",
                                "value": request_data.get("requester_name", "N/A")
                            },
                            {
                                "title": "–≠—Ö–ª—ç—Ö ”©–¥”©—Ä:",
                                "value": request_data.get("start_date", "N/A")
                            },
                            {
                                "title": "–î—É—É—Å–∞—Ö ”©–¥”©—Ä:",
                                "value": request_data.get("end_date", "N/A")
                            },
                            {
                                "title": "–•–æ–Ω–æ–≥–∏–π–Ω —Ç–æ–æ:",
                                "value": str(request_data.get("days", "N/A"))
                            },
                            {
                                "title": "–¶–∞–≥–∏–π–Ω —Ç–æ–æ:",
                                "value": f"{request_data.get('inactive_hours', 'N/A')} —Ü–∞–≥"
                            },
                            {
                                "title": "–®–∞–ª—Ç–≥–∞–∞–Ω:",
                                "value": request_data.get("reason", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
                            },
                            {
                                "title": "–ë–æ–ª–æ–≤—Å—Ä—É—É–ª—Å–∞–Ω:",
                                "value": datetime.now().strftime("%Y-%m-%d %H:%M")
                            }
                        ]
                    }
                ],
                "actions": [
                    {
                        "type": "Action.Submit",
                        "title": "‚úÖ –ó”©–≤—à”©”©—Ä”©—Ö",
                        "data": {
                            "action": "approve",
                            "request_id": request_data.get("request_id")
                        },
                        "style": "positive",
                        "isEnabled": False
                    },
                    {
                        "type": "Action.Submit", 
                        "title": "‚ùå –¢–∞—Ç–≥–∞–ª–∑–∞—Ö",
                        "data": {
                            "action": "reject",
                            "request_id": request_data.get("request_id")
                        },
                        "style": "destructive",
                        "isEnabled": False
                    }
                ]
            }
            return card

        # Approval status —à–∏–Ω—ç—á–ª—ç—Ö
        if action == "approve":
            request_data["status"] = "approved"
            request_data["approved_at"] = datetime.now().isoformat()
            request_data["approved_by"] = context.activity.from_property.id
            
            # –•“Ø—Å—ç–ª—Ç —Ö–∞–¥–≥–∞–ª–∞—Ö
            save_leave_request(request_data)
            
            # Disabled card –∏–ª–≥—ç—ç—Ö
            disabled_card = create_disabled_card("approve")
            adaptive_card_attachment = Attachment(
                content_type="application/vnd.microsoft.card.adaptive",
                content=disabled_card
            )
            disabled_message = MessageFactory.attachment(adaptive_card_attachment)
            await context.send_activity(disabled_message)
            
            # –•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á —Ä—É—É –º—ç–¥—ç–≥–¥—ç—Ö
            requester_conversation = load_conversation_reference(request_data["requester_user_id"])
            if requester_conversation:
                async def notify_approval(ctx: TurnContext):
                    await ctx.send_activity(f"üéâ –¢–∞–Ω—ã —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –∑”©–≤—à”©”©—Ä”©–≥–¥–ª”©”©!\nüìÖ {request_data['start_date']} - {request_data['end_date']} ({request_data['days']} —Ö–æ–Ω–æ–≥)\n‚ú® –°–∞–π—Ö–∞–Ω –∞–º—Ä–∞–ª—Ç–∞–∞!")

                await ADAPTER.continue_conversation(
                    requester_conversation,
                    notify_approval,
                    app_id
                )
            
        elif action == "reject":
            request_data["status"] = "rejected"
            request_data["rejected_at"] = datetime.now().isoformat()
            request_data["rejected_by"] = context.activity.from_property.id
            
            # –•“Ø—Å—ç–ª—Ç —Ö–∞–¥–≥–∞–ª–∞—Ö
            save_leave_request(request_data)
            
            # Disabled card –∏–ª–≥—ç—ç—Ö
            disabled_card = create_disabled_card("reject")
            adaptive_card_attachment = Attachment(
                content_type="application/vnd.microsoft.card.adaptive",
                content=disabled_card
            )
            disabled_message = MessageFactory.attachment(adaptive_card_attachment)
            await context.send_activity(disabled_message)
            
            # –•“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞–≥—á —Ä—É—É –º—ç–¥—ç–≥–¥—ç—Ö
            requester_conversation = load_conversation_reference(request_data["requester_user_id"])
            if requester_conversation:
                async def notify_rejection(ctx: TurnContext):
                    await ctx.send_activity(f"‚ùå –¢–∞–Ω—ã —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç —Ç–∞—Ç–≥–∞–ª–∑–∞–≥–¥–ª–∞–∞\nüìÖ {request_data['start_date']} - {request_data['end_date']} ({request_data['days']} —Ö–æ–Ω–æ–≥)\nüí¨ –ù—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª–ª–∏–π–Ω —Ö—ç—Ä—ç–≥—Ç—ç–π –±–æ–ª —É–¥–∏—Ä–¥–ª–∞–≥–∞—Ç–∞–π–≥–∞–∞ —è—Ä–∏–ª—Ü–∞–Ω–∞ —É—É.")

                await ADAPTER.continue_conversation(
                    requester_conversation,
                    notify_rejection,
                    app_id
                )

        logger.info(f"Leave request {request_id} {action}d by {context.activity.from_property.id}")
        
    except Exception as e:
        logger.error(f"Error handling adaptive card action: {str(e)}")
        await context.send_activity(f"‚ùå –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}")

@app.route("/proactive-message", methods=["POST"])
def proactive_message():
    data = request.json
    message_text = data.get("message", "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!")
    user_id = data.get("user_id")  # –¢–æ–¥–æ—Ä—Ö–æ–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á —Ä“Ø“Ø –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
    
    try:
        if user_id:
            # –¢–æ–¥–æ—Ä—Ö–æ–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á —Ä“Ø“Ø –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
            conversation_reference = load_conversation_reference(user_id)
            if not conversation_reference:
                return jsonify({"error": f"User {user_id} not found"}), 404
        else:
            # –•—É—É—á–∏–Ω –∞—Ä–≥–∞: conversation_reference.json —Ñ–∞–π–ª–∞–∞—Å —É–Ω—à–∏—Ö
            try:
                with open("conversation_reference.json", "r", encoding="utf-8") as f:
                    ref_data = json.load(f)
                conversation_reference = ConversationReference().deserialize(ref_data)
            except FileNotFoundError:
                return jsonify({"error": "No conversation reference found. Please specify user_id or ensure at least one user has messaged the bot."}), 404
        
        # –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π log
        logger.info("=== Proactive message info ===")
        logger.info(f"User ID: {conversation_reference.user.id}")
        logger.info(f"User Name: {getattr(conversation_reference.user, 'name', None)}")
        logger.info(f"Conversation ID: {conversation_reference.conversation.id}")
        logger.info(f"Conversation Type: {getattr(conversation_reference.conversation, 'conversation_type', None)}")
        logger.info(f"Service URL: {conversation_reference.service_url}")
        logger.info(f"Bot ID: {conversation_reference.bot.id}")
        logger.info(f"Tenant ID: {getattr(conversation_reference.conversation, 'tenant_id', None)}")
        logger.info(f"Channel ID: {conversation_reference.channel_id}")
        logger.info(f"Message to send: {message_text}")
        
        async def send_proactive(context: TurnContext):
            await context.send_activity(message_text)
        
        asyncio.run(
            ADAPTER.continue_conversation(
                conversation_reference,
                send_proactive,
                app_id
            )
        )
        logger.info("Proactive message sent successfully")
        return jsonify({"status": "ok", "user_id": conversation_reference.user.id}), 200
    except Exception as e:
        logger.error(f"Proactive message error: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/broadcast", methods=["POST"])
def broadcast_message():
    """–ë“Ø—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á —Ä“Ø“Ø –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö"""
    data = request.json
    message_text = data.get("message", "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!")
    
    users = list_all_users()
    if not users:
        return jsonify({"error": "No users found"}), 404
    
    results = []
    for user_info in users:
        user_id = user_info["user_id"]
        try:
            conversation_reference = load_conversation_reference(user_id)
            if conversation_reference:
                async def send_proactive(context: TurnContext):
                    await context.send_activity(message_text)
                
                asyncio.run(
                    ADAPTER.continue_conversation(
                        conversation_reference,
                        send_proactive,
                        app_id
                    )
                )
                results.append({
                    "user_id": user_id,
                    "email": user_info.get("email"),
                    "user_name": user_info.get("user_name"),
                    "status": "success"
                })
                logger.info(f"Message sent to user {user_id} ({user_info.get('email', 'No email')})")
            else:
                results.append({
                    "user_id": user_id,
                    "email": user_info.get("email"),
                    "user_name": user_info.get("user_name"),
                    "status": "failed",
                    "error": "Reference not found"
                })
        except Exception as e:
            results.append({
                "user_id": user_id,
                "email": user_info.get("email"),
                "user_name": user_info.get("user_name"),
                "status": "failed",
                "error": str(e)
            })
            logger.error(f"Failed to send message to user {user_id}: {str(e)}")
    
    return jsonify({"results": results, "total_users": len(users), "message": message_text}), 200

@app.route("/send-by-conversation", methods=["POST"])
def send_by_conversation():
    """Conversation ID-–∞–∞—Ä –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö"""
    try:
        data = request.json
        conversation_id = data.get("conversation_id")
        message_text = data.get("message", "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!")

        if not conversation_id:
            return jsonify({"error": "conversation_id is required"}), 400

        # Conversation ID-–∞–∞—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–æ—Ö
        user_info = find_user_by_conversation_id(conversation_id)
        if not user_info:
            return jsonify({"error": f"User with conversation_id {conversation_id} not found"}), 404

        # Conversation reference —É–Ω—à–∏—Ö
        conversation_reference = load_conversation_reference(user_info["user_id"])
        if not conversation_reference:
            return jsonify({"error": "Conversation reference not found"}), 404

        # –ú–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
        async def send_message(context: TurnContext):
            await context.send_activity(message_text)

        asyncio.run(
            ADAPTER.continue_conversation(
                conversation_reference,
                send_message,
                app_id
            )
        )

        logger.info(f"Message sent to conversation {conversation_id} (user: {user_info.get('email', 'N/A')})")
        return jsonify({
            "status": "success",
            "conversation_id": conversation_id,
            "user_email": user_info.get("email"),
            "user_name": user_info.get("user_name"),
            "message": message_text
        }), 200

    except Exception as e:
        logger.error(f"Send by conversation error: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 error: {str(error)}")
    return jsonify({"error": "Internal server error"}), 500

@app.route("/approval-callback", methods=["POST"])
def approval_callback():
    """Adaptive card approval callback (backup endpoint)"""
    try:
        data = request.json
        action = data.get("action")
        request_id = data.get("request_id")
        
        logger.info(f"Approval callback: {action} for request {request_id}")
        
        return jsonify({"status": "received", "action": action, "request_id": request_id}), 200
    except Exception as e:
        logger.error(f"Approval callback error: {str(e)}")
        return jsonify({"error": str(e)}), 500

def save_pending_confirmation(user_id, request_data):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–≥ —Ö“Ø–ª—ç—ç–∂ –±—É–π –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö"""
    try:
        safe_user_id = user_id.replace(":", "_").replace("/", "_").replace("\\", "_")
        filename = f"{PENDING_CONFIRMATIONS_DIR}/pending_{safe_user_id}.json"
        
        confirmation_data = {
            "user_id": user_id,
            "request_data": request_data,
            "created_at": datetime.now().isoformat(),
            "status": "awaiting_confirmation"
        }
        
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(confirmation_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"Saved pending confirmation for user {user_id}")
        return True
    except Exception as e:
        logger.error(f"Failed to save pending confirmation: {str(e)}")
        return False

def load_pending_confirmation(user_id):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–≥ —Ö“Ø–ª—ç—ç–∂ –±—É–π –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —É–Ω—à–∏—Ö"""
    try:
        safe_user_id = user_id.replace(":", "_").replace("/", "_").replace("\\", "_")
        filename = f"{PENDING_CONFIRMATIONS_DIR}/pending_{safe_user_id}.json"
        
        if not os.path.exists(filename):
            return None
        
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Failed to load pending confirmation for user {user_id}: {str(e)}")
        return None

def delete_pending_confirmation(user_id):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–≥ —Ö“Ø–ª—ç—ç–∂ –±—É–π –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —É—Å—Ç–≥–∞—Ö"""
    try:
        safe_user_id = user_id.replace(":", "_").replace("/", "_").replace("\\", "_")
        filename = f"{PENDING_CONFIRMATIONS_DIR}/pending_{safe_user_id}.json"
        
        if os.path.exists(filename):
            os.remove(filename)
            logger.info(f"Deleted pending confirmation for user {user_id}")
        return True
    except Exception as e:
        logger.error(f"Failed to delete pending confirmation: {str(e)}")
        return False

def is_confirmation_response(text):
    """–ú–µ—Å—Å–µ–∂ –Ω—å –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω —Ö–∞—Ä–∏—É —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö"""
    text_lower = text.lower().strip()
    
    # –ó”©–≤—à”©”©—Ä”©—Ö “Ø–≥“Ø“Ø–¥
    approve_words = [
        '—Ç–∏–π–º', '–∑”©–≤', 'yes', '–∑”©–≤—à”©”©—Ä–Ω”©', '–∏–ª–≥—ç—ç', 'ok', 'okay', 
        '–∑”©–≤—à”©”©—Ä”©—Ö', '–±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞', '–±–æ–ª–Ω–æ', '—Ç–∏–π–º —à“Ø“Ø', '–∑”©–≤ –±–∞–π–Ω–∞', "tiim"
    ]
    
    # –¢–∞—Ç–≥–∞–ª–∑–∞—Ö “Ø–≥“Ø“Ø–¥  
    reject_words = [
        '“Ø–≥“Ø–π', '–±—É—Ä—É—É', 'no', '—Ç–∞—Ç–≥–∞–ª–∑–∞–Ω–∞', '–±–∏—Ç–≥–∏–π', '–±–æ–ª–æ—Ö–≥“Ø–π',
        '–∑–∞—Å–Ω–∞', '—à–∏–Ω—ç—ç—Ä', '–¥–∞—Ö–∏–Ω', '”©”©—Ä—á–ª”©—Ö', '–∑”©–≤ –±–∏—à', 'ugui', 'ugu', 'gu', 'zasna', 'zasan', 'zasnaa'
    ]
    
    for word in approve_words:
        if word in text_lower:
            return "approve"
    
    for word in reject_words:
        if word in text_lower:
            return "reject"
    
    return None

def create_confirmation_message(parsed_data):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –º–µ—Å—Å–µ–∂ “Ø“Ø—Å–≥—ç—Ö"""
    message = f"""üîç –¢–∞–Ω—ã —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç—ç—ç—Å –¥–∞—Ä–∞–∞—Ö –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –æ–ª–∂ –∞–≤–ª–∞–∞:

üìÖ **–≠—Ö–ª—ç—Ö –æ–≥–Ω–æ–æ:** {parsed_data.get('start_date')}
üìÖ **–î—É—É—Å–∞—Ö –æ–≥–Ω–æ–æ:** {parsed_data.get('end_date')}  
‚è∞ **–•–æ–Ω–æ–≥–∏–π–Ω —Ç–æ–æ:** {parsed_data.get('days')} —Ö–æ–Ω–æ–≥
üïí **–¶–∞–≥–∏–π–Ω —Ç–æ–æ:** {parsed_data.get('inactive_hours')} —Ü–∞–≥
üí≠ **–®–∞–ª—Ç–≥–∞–∞–Ω:** {parsed_data.get('reason')}

‚ùì **–≠–Ω—ç –º—ç–¥—ç—ç–ª—ç–ª –∑”©–≤ –±”©–≥”©”©–¥ –º–µ–Ω–µ–∂–µ—Ä —Ä—É—É –∏–ª–≥—ç—ç—Ö–∏–π–≥ –∑”©–≤—à”©”©—Ä—á –±–∞–π–Ω–∞ —É—É?**

üí¨ –•–∞—Ä–∏—É–ª–Ω–∞ —É—É:
‚Ä¢ **"–¢–∏–π–º"** —ç—Å–≤—ç–ª **"–ó”©–≤"** - –ò–ª–≥—ç—ç—Ö
‚Ä¢ **"“Æ–≥“Ø–π"** —ç—Å–≤—ç–ª **"–ó–∞—Å–Ω–∞"** - –ó–∞—Å–≤–∞—Ä–ª–∞—Ö"""

    return message

async def send_approved_request_to_manager(request_data, original_message):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª—Å–∞–Ω —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –º–µ–Ω–µ–∂–µ—Ä —Ä—É—É –∏–ª–≥—ç—ç—Ö"""
    try:
        approver_conversation = load_conversation_reference(APPROVER_USER_ID)
        
        if approver_conversation:
            # Adaptive card “Ø“Ø—Å–≥—ç—Ö
            approval_card = create_approval_card(request_data)
            
            async def notify_manager_with_card(ctx: TurnContext):
                adaptive_card_attachment = Attachment(
                    content_type="application/vnd.microsoft.card.adaptive",
                    content=approval_card
                )
                message = MessageFactory.attachment(adaptive_card_attachment)
                message.text = f"üì® –ë–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç: {request_data['requester_name']}\nüí¨ –ê–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂: \"{original_message}\"\n‚úÖ –•—ç—Ä—ç–≥–ª—ç–≥—á –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª—Å–∞–Ω"
                await ctx.send_activity(message)
            
            await ADAPTER.continue_conversation(
                approver_conversation,
                notify_manager_with_card,
                app_id
            )
            logger.info(f"Approved leave request {request_data['request_id']} sent to manager")
        else:
            logger.warning(f"Manager conversation reference not found for request {request_data['request_id']}")
    except Exception as e:
        logger.error(f"Error sending approved request to manager: {str(e)}")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    logger.info(f"Starting Flask app on port {port}")
    app.run(host="0.0.0.0", port=port, debug=True)