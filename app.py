import os
import logging
from flask import Flask, request, jsonify
from botbuilder.core import BotFrameworkAdapter, BotFrameworkAdapterSettings, TurnContext
from botbuilder.schema import Activity
import openai
from dotenv import load_dotenv
import asyncio
from msgraph import GraphServiceClient
from azure.identity.aio import ClientSecretCredential
import requests

# Logging —Ç–æ—Ö–∏—Ä–≥–æ–æ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")

# Bot Framework —Ç–æ—Ö–∏—Ä–≥–æ–æ
app_id = os.getenv("MICROSOFT_APP_ID", "")
app_password = os.getenv("MICROSOFT_APP_PASSWORD", "")

# Microsoft Graph —Ç–æ—Ö–∏—Ä–≥–æ–æ
TENANT_ID = os.getenv("TENANT_ID")
CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")

logger.info(f"Bot starting with App ID: {app_id[:10]}..." if app_id else "No App ID")

SETTINGS = BotFrameworkAdapterSettings(app_id, app_password)
ADAPTER = BotFrameworkAdapter(SETTINGS)

app = Flask(__name__)

async def send_manager_notification(user_email, leave_request_text, gpt_analysis=None):
    """–ú–µ–Ω–µ–∂–µ—Ä —Ä“Ø“Ø leave —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω –º—ç–¥—ç–≥–¥—ç–ª –∏–ª–≥—ç—ç—Ö —Ñ—É–Ω–∫—Ü"""
    logger.info(f"Sending manager notification for user: {user_email}")
    
    credential = ClientSecretCredential(
        tenant_id=TENANT_ID,
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
    )

    try:
        # GraphServiceClient “Ø“Ø—Å–≥—ç—Ö
        graph_client = GraphServiceClient(credentials=credential, scopes=["https://graph.microsoft.com/.default"])

        # –ú–µ–Ω–µ–∂–µ—Ä–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        result = await graph_client.users.by_user_id(user_email).manager.get()
        
        if result:
            manager_upn = result.user_principal_name
            manager_name = result.display_name or manager_upn
            logger.info(f"Found manager: {manager_name} ({manager_upn})")
            
            # –¢–æ–∫–µ–Ω –∞–≤–∞—Ö (—à–∏–Ω—ç credential “Ø“Ø—Å–≥—ç—Ö)
            token_credential = ClientSecretCredential(
                tenant_id=TENANT_ID,
                client_id=CLIENT_ID,
                client_secret=CLIENT_SECRET,
            )
            
            try:
                access_token = await token_credential.get_token("https://graph.microsoft.com/.default")
                headers = {
                    "Authorization": f"Bearer {access_token.token}",
                    "Content-Type": "application/json"
                }

                # –ë–∞–π–≥–∞–∞ —á–∞—Ç—É—É–¥—ã–≥ —Ö–∞–π–∂ –æ–ª–æ—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ
                logger.info("Looking for existing chats with manager...")
                
                # 1. –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —á–∞—Ç—É—É–¥—ã–≥ –∞–≤–∞—Ö
                chats_url = f"https://graph.microsoft.com/v1.0/users/{user_email}/chats"
                chats_response = requests.get(chats_url, headers=headers)
                
                chat_id = None
                
                if chats_response.status_code == 200:
                    chats_data = chats_response.json()
                    logger.info(f"Found {len(chats_data.get('value', []))} chats")
                    
                    # –ú–µ–Ω–µ–∂–µ—Ä—Ç—ç–π 1:1 —á–∞—Ç —Ö–∞–π—Ö
                    for chat in chats_data.get('value', []):
                        if chat.get('chatType') == 'oneOnOne':
                            # –ß–∞—Ç—ã–Ω –≥–∏—à“Ø“Ø–¥–∏–π–≥ —à–∞–ª–≥–∞—Ö
                            members_url = f"https://graph.microsoft.com/v1.0/chats/{chat['id']}/members"
                            members_response = requests.get(members_url, headers=headers)
                            
                            if members_response.status_code == 200:
                                members = members_response.json().get('value', [])
                                for member in members:
                                    if member.get('email') == manager_upn or member.get('userId') == result.id:
                                        chat_id = chat['id']
                                        logger.info(f"Found existing chat with manager: {chat_id}")
                                        break
                            if chat_id:
                                break
                
                # 2. –•—ç—Ä—ç–≤ –±–∞–π–≥–∞–∞ —á–∞—Ç –æ–ª–¥–æ–æ–≥“Ø–π –±–æ–ª —à–∏–Ω—ç —á–∞—Ç “Ø“Ø—Å–≥—ç—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ
                if not chat_id:
                    logger.info("No existing chat found, attempting to create new chat...")
                    
                    chat_url = "https://graph.microsoft.com/v1.0/chats"
                    chat_data = {
                        "chatType": "oneOnOne",
                        "members": [
                            {
                                "@odata.type": "#microsoft.graph.aadUserConversationMember",
                                "roles": ["owner"],
                                "user@odata.bind": f"https://graph.microsoft.com/v1.0/users('{manager_upn}')"
                            },
                            {
                                "@odata.type": "#microsoft.graph.aadUserConversationMember", 
                                "roles": ["owner"],
                                "user@odata.bind": f"https://graph.microsoft.com/v1.0/users('{user_email}')"
                            }
                        ]
                    }
                    
                    chat_response = requests.post(chat_url, headers=headers, json=chat_data)
                    
                    if chat_response.status_code == 201:
                        chat_id = chat_response.json()["id"]
                        logger.info(f"Created new chat: {chat_id}")
                    else:
                        logger.error(f"Chat creation failed: {chat_response.status_code}")
                        logger.error(chat_response.text)
                        return f"–ß–∞—Ç “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {chat_response.status_code}. Admin-–∞–∞—Å Chat.Create permission —Ö“Ø—Å—ç—ç—Ä—ç–π."
                
                # 3. –ß–∞—Ç—Ä“Ø“Ø Adaptive Card –∏–ª–≥—ç—ç—Ö
                if chat_id:
                    # GPT –∞–Ω–∞–ª–∏–∑—ã–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ Adaptive Card-–¥ –Ω—ç–º—ç—Ö
                    card_body = [
                        {
                            "type": "TextBlock",
                            "text": "üèñÔ∏è **Leave —Ö“Ø—Å—ç–ª—Ç**",
                            "weight": "Bolder",
                            "size": "Medium"
                        },
                        {
                            "type": "TextBlock",
                            "text": f"**–•—ç—Ä—ç–≥–ª—ç–≥—á:** {user_email}",
                            "wrap": True
                        },
                        {
                            "type": "TextBlock",
                            "text": f"**–•“Ø—Å—ç–ª—Ç:** {leave_request_text}",
                            "wrap": True
                        }
                    ]
                    
                    # –•—ç—Ä—ç–≤ GPT –∞–Ω–∞–ª–∏–∑ –±–∞–π–≥–∞–∞ –±–æ–ª –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª –Ω—ç–º—ç—Ö
                    if gpt_analysis:
                        card_body.extend([
                            {
                                "type": "TextBlock",
                                "text": f"**–¢”©—Ä”©–ª:** {gpt_analysis.get('leave_type', '—Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π')}",
                                "wrap": True
                            },
                            {
                                "type": "TextBlock", 
                                "text": f"**–•—É–≥–∞—Ü–∞–∞:** {gpt_analysis.get('duration', '—Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π')}",
                                "wrap": True
                            },
                            {
                                "type": "TextBlock",
                                "text": f"**–®–∞–ª—Ç–≥–∞–∞–Ω:** {gpt_analysis.get('reason', '—Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π')}",
                                "wrap": True
                            },
                            {
                                "type": "TextBlock",
                                "text": f"**–Ø–∞—Ä–∞–ª—Ç–∞–π –±–∞–π–¥–∞–ª:** {gpt_analysis.get('urgency', '–µ—Ä–¥–∏–π–Ω')}",
                                "wrap": True
                            }
                        ])
                    
                    card_body.extend([
                        {
                            "type": "TextBlock",
                            "text": f"**–û–≥–Ω–æ–æ:** {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M')}",
                            "wrap": True
                        },
                        {
                            "type": "TextBlock",
                            "text": "–¢–∞ —ç–Ω—ç —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –∑”©–≤—à”©”©—Ä”©—Ö “Ø“Ø?",
                            "wrap": True
                        }
                    ])

                    adaptive_card_content = {
                        "type": "AdaptiveCard",
                        "body": card_body,
                        "actions": [
                            {
                                "type": "Action.Submit",
                                "title": "‚úÖ –ó”©–≤—à”©”©—Ä”©—Ö",
                                "data": {"action": "approve", "user_email": user_email}
                            },
                            {
                                "type": "Action.Submit",
                                "title": "‚ùå –¢–∞—Ç–≥–∞–ª–∑–∞—Ö", 
                                "data": {"action": "reject", "user_email": user_email}
                            }
                        ],
                        "version": "1.4"
                    }

                    message_url = f"https://graph.microsoft.com/v1.0/chats/{chat_id}/messages"
                    message_data = {
                        "body": {
                            "contentType": "html",
                            "content": "Leave —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω —à–∏–π–¥–≤—ç—Ä"
                        },
                        "attachments": [
                            {
                                "contentType": "application/vnd.microsoft.card.adaptive",
                                "content": adaptive_card_content
                            }
                        ]
                    }
                    
                    logger.info("Sending Adaptive Card to chat...")
                    message_response = requests.post(message_url, headers=headers, json=message_data)
                    
                    if message_response.status_code == 201:
                        logger.info("Adaptive Card sent successfully!")
                        return f"–¢–∞–Ω—ã leave —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ {manager_name} –º–µ–Ω–µ–∂–µ—Ä —Ä“Ø“Ø Teams —á–∞—Ç–∞–∞—Ä –∏–ª–≥—ç—ç–ª—ç—ç. ‚úÖ"
                    else:
                        logger.error(f"Message send error: {message_response.status_code}")
                        logger.error(message_response.text)
                        return "Teams –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞."
                else:
                    return "Teams —á–∞—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π —ç—Å–≤—ç–ª “Ø“Ø—Å–≥—ç–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π."
                    
            finally:
                await token_credential.close()
        else:
            logger.warning("Manager not found")
            return "–¢–∞–Ω—ã –º–µ–Ω–µ–∂–µ—Ä –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
            
    except Exception as e:
        logger.error(f"Error in send_manager_notification: {str(e)}")
        return f"–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}"
    finally:
        await credential.close()

async def analyze_leave_request_with_gpt(text):
    """GPT-4 –∞—à–∏–≥–ª–∞–Ω leave —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –æ–π–ª–≥–æ—Ö —Ñ—É–Ω–∫—Ü"""
    if not text or not openai.api_key:
        return None
    
    try:
        client = openai.OpenAI(api_key=openai.api_key)
        
        prompt = f"""
        –¢–∞ —Ö“Ø–Ω–∏–π –º—ç–¥—Ä—ç–º–∂—Ç—ç–π AI —Ç—É—Å–ª–∞—á —é–º. –î–∞—Ä–∞–∞—Ö —Ç–µ–∫—Å—Ç–∏–π–≥ —É–Ω—à–∏–∂, —ç–Ω—ç –Ω—å –∞–∂–ª–∞–∞—Å —á”©–ª”©”© –∞–≤–∞—Ö —Ö“Ø—Å—ç–ª—Ç —ç—Å—ç—Ö–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–Ω–æ —É—É.

        –¢–µ–∫—Å—Ç: "{text}"

        –•—ç—Ä—ç–≤ —ç–Ω—ç –Ω—å —á”©–ª”©”© –∞–≤–∞—Ö —Ö“Ø—Å—ç–ª—Ç –±–æ–ª JSON —Ñ–æ—Ä–º–∞—Ç–∞–∞—Ä –¥–∞—Ä–∞–∞—Ö –º—ç–¥—ç—ç–ª–ª–∏–π–≥ ”©–≥–Ω”© “Ø“Ø:
        {{
            "is_leave_request": true,
            "leave_type": "–∞–º—Ä–∞–ª—Ç/”©–≤—á—Ç—ç–π/—Ö—É–≤–∏–π–Ω/–≥—ç—Ä –±“Ø–ª–∏–π–Ω/–±—É—Å–∞–¥",
            "duration": "1 ”©–¥”©—Ä/—Ö—ç–¥—ç–Ω ”©–¥”©—Ä/—Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π",
            "reason": "—à–∞–ª—Ç–≥–∞–∞–Ω—ã —Ç–æ–≤—á —Ç–∞–π–ª–±–∞—Ä",
            "urgency": "—è–∞—Ä–∞–ª—Ç–∞–π/–µ—Ä–¥–∏–π–Ω/—Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π",
            "processed_request": "Formal —Ö—ç–ª–±—ç—Ä—ç—ç—Ä –±–æ–ª–æ–≤—Å—Ä—É—É–ª—Å–∞–Ω —Ö“Ø—Å—ç–ª—Ç"
        }}

        –•—ç—Ä—ç–≤ —á”©–ª”©”© –∞–≤–∞—Ö —Ö“Ø—Å—ç–ª—Ç –±–∏—à –±–æ–ª:
        {{
            "is_leave_request": false
        }}

        –ú–æ–Ω–≥–æ–ª —Ö—ç–ª, —Ç—Ä–∞–Ω—Å–ª–∏—Ç, –∞–Ω–≥–ª–∏ —Ö—ç–ª—ç—ç—Ä –±–∏—á—Å—ç–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –±“Ø–≥–¥–∏–π–≥ –æ–π–ª–≥–æ–Ω–æ —É—É.
        """
        
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )
        
        result_text = response.choices[0].message.content.strip()
        
        # JSON parse —Ö–∏–π—Ö
        import json
        try:
            result = json.loads(result_text)
            return result
        except json.JSONDecodeError:
            # –•—ç—Ä—ç–≤ JSON –±–∏—à –±–æ–ª text-—ç—ç—Å is_leave_request-–≥ —Ö–∞–π—Ö
            if "true" in result_text.lower() and "leave" in result_text.lower():
                return {
                    "is_leave_request": True,
                    "leave_type": "—Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π",
                    "duration": "—Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π", 
                    "reason": text,
                    "urgency": "–µ—Ä–¥–∏–π–Ω",
                    "processed_request": text
                }
            return {"is_leave_request": False}
            
    except Exception as e:
        logger.error(f"GPT analysis error: {str(e)}")
        return None

def is_leave_request(text):
    """Leave —Ö“Ø—Å—ç–ª—Ç —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö —Ñ—É–Ω–∫—Ü (fallback)"""
    if not text:
        return False
        
    leave_keywords = [
        '—á”©–ª”©”©', 'chuluu', 'leave', '–∞–º—Ä–∞—Ö', '–∞–º—Ä–∞–ª—Ç',
        '”©–≤—á—Ç—ç–π', 'ovchtei', 'sick', '—ç–º–Ω—ç–ª—ç–≥', 'emnelg',
        '—Ö“Ø—Å—ç–ª—Ç', 'huselt', 'request', '–∑”©–≤—à”©”©—Ä”©–ª', 'zuvshuurul'
    ]
    
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in leave_keywords)

# –≠–Ω–≥–∏–π–Ω health check endpoint
@app.route("/", methods=["GET"])
def health_check():
    return jsonify({
        "status": "running",
        "message": "Flask Bot Server is running",
        "endpoints": ["/api/messages"],
        "app_id_configured": bool(os.getenv("MICROSOFT_APP_ID")),
        "openai_configured": bool(os.getenv("OPENAI_API_KEY")),
        "graph_configured": bool(TENANT_ID and CLIENT_ID and CLIENT_SECRET)
    })

@app.route("/api/messages", methods=["POST"])
def process_messages():
    try:
        logger.info("Received message request")
        
        # Request body —à–∞–ª–≥–∞—Ö
        if not request.is_json:
            logger.error("Request is not JSON")
            return jsonify({"error": "Content-Type must be application/json"}), 400
            
        body = request.get_json()
        logger.info(f"Request body: {body}")
        
        # –•—ç—Ä—ç–≤ body —Ö–æ–æ—Å–æ–Ω –±–æ–ª
        if not body:
            logger.error("Empty request body")
            return jsonify({"error": "Request body is required"}), 400

        # Activity –æ–±—ä–µ–∫—Ç “Ø“Ø—Å–≥—ç—Ö
        try:
            activity = Activity().deserialize(body)
            logger.info(f"Activity type: {activity.type}, text: {activity.text}")
        except Exception as e:
            logger.error(f"Failed to deserialize activity: {str(e)}")
            return jsonify({"error": f"Invalid activity format: {str(e)}"}), 400

        async def logic(context: TurnContext):
            try:
                if activity.type == "message":
                    user_text = activity.text or "No text provided"
                    user_email = activity.from_property.aad_object_id if hasattr(activity.from_property, 'aad_object_id') else None
                    user_name = activity.from_property.name if hasattr(activity.from_property, 'name') else "Unknown User"
                    
                    logger.info(f"Processing message from {user_name}: {user_text}")
                    
                    # GPT-4 –∞—à–∏–≥–ª–∞–Ω leave —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –∞–Ω–∞–ª–∏–∑ —Ö–∏–π—Ö
                    await context.send_activity("ü§ñ –¢–∞–Ω—ã –º–µ—Å—Å–µ–∂–∏–π–≥ –∞–Ω–∞–ª–∏–∑ —Ö–∏–π–∂ –±–∞–π–Ω–∞...")
                    
                    gpt_analysis = await analyze_leave_request_with_gpt(user_text)
                    
                    if gpt_analysis and gpt_analysis.get("is_leave_request"):
                        logger.info("Leave request detected by GPT-4!")
                        
                        # GPT-4-—ç—ç—Å –∏—Ä—Å—ç–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞—à–∏–≥–ª–∞—Ö
                        leave_type = gpt_analysis.get("leave_type", "—Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
                        duration = gpt_analysis.get("duration", "—Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
                        reason = gpt_analysis.get("reason", user_text)
                        urgency = gpt_analysis.get("urgency", "–µ—Ä–¥–∏–π–Ω")
                        processed_request = gpt_analysis.get("processed_request", user_text)
                        
                        # –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞—Ä—É—É–ª–∞—Ö
                        analysis_message = f"""
‚úÖ **Leave —Ö“Ø—Å—ç–ª—Ç —Ç–∞–Ω—ã–≥–¥–ª–∞–∞!**

üìã **–ê–Ω–∞–ª–∏–∑—ã–Ω –¥“Ø–Ω:**
‚Ä¢ **–¢”©—Ä”©–ª:** {leave_type}
‚Ä¢ **–•—É–≥–∞—Ü–∞–∞:** {duration}  
‚Ä¢ **–®–∞–ª—Ç–≥–∞–∞–Ω:** {reason}
‚Ä¢ **–Ø–∞—Ä–∞–ª—Ç–∞–π –±–∞–π–¥–∞–ª:** {urgency}

üöÄ –ú–µ–Ω–µ–∂–µ—Ä —Ä“Ø“Ø –∏–ª–≥—ç—ç–∂ –±–∞–π–Ω–∞...
                        """
                        await context.send_activity(analysis_message.strip())
                        
                        # –•—ç—Ä—ç–≤ user email –±–∞–π—Ö–≥“Ø–π –±–æ–ª default –∞—à–∏–≥–ª–∞—Ö
                        if not user_email:
                            # Teams-–∞–∞—Å user email –∞–≤–∞—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ
                            user_email = getattr(activity.from_property, 'email', None) or "tuvshinjargal@fibo.cloud"
                        
                        try:
                            # –ú–µ–Ω–µ–∂–µ—Ä —Ä“Ø“Ø –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç–≥–¥—ç–ª –∏–ª–≥—ç—ç—Ö
                            result = await send_manager_notification(user_email, processed_request, gpt_analysis)
                            await context.send_activity(result)
                        except Exception as e:
                            logger.error(f"Manager notification error: {str(e)}")
                            await context.send_activity(f"–ú–µ–Ω–µ–∂–µ—Ä —Ä“Ø“Ø –º—ç–¥—ç–≥–¥—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {str(e)}")
                        
                        return
                    elif gpt_analysis is None:
                        # GPT analysis –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª—Å–æ–Ω —Ç–æ—Ö–∏–æ–ª–¥–æ–ª–¥ fallback –∞—à–∏–≥–ª–∞—Ö
                        logger.warning("GPT analysis failed, using fallback method")
                        if is_leave_request(user_text):
                            logger.info("Leave request detected by fallback method!")
                            await context.send_activity("üèñÔ∏è Leave —Ö“Ø—Å—ç–ª—Ç —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞. –ú–µ–Ω–µ–∂–µ—Ä —Ä“Ø“Ø –∏–ª–≥—ç—ç–∂ –±–∞–π–Ω–∞...")
                            
                            # –•—ç—Ä—ç–≤ user email –±–∞–π—Ö–≥“Ø–π –±–æ–ª default –∞—à–∏–≥–ª–∞—Ö
                            if not user_email:
                                user_email = getattr(activity.from_property, 'email', None) or "tuvshinjargal@fibo.cloud"
                            
                            try:
                                # –ú–µ–Ω–µ–∂–µ—Ä —Ä“Ø“Ø –º—ç–¥—ç–≥–¥—ç–ª –∏–ª–≥—ç—ç—Ö
                                result = await send_manager_notification(user_email, user_text)
                                await context.send_activity(result)
                            except Exception as e:
                                logger.error(f"Manager notification error: {str(e)}")
                                await context.send_activity(f"–ú–µ–Ω–µ–∂–µ—Ä —Ä“Ø“Ø –º—ç–¥—ç–≥–¥—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {str(e)}")
                            
                            return
                    
                    # –•—ç—Ä—ç–≤ leave —Ö“Ø—Å—ç–ª—Ç –±–∏—à –±–æ–ª OpenAI –∞—à–∏–≥–ª–∞—Ö
                    if not openai.api_key:
                        logger.warning("OpenAI API key not configured")
                        await context.send_activity("OpenAI API key —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞.")
                        return
                    
                    try:
                        # OpenAI API –¥—É—É–¥–∞—Ö
                        client = openai.OpenAI(api_key=openai.api_key)
                        response = client.chat.completions.create(
                            model="gpt-3.5-turbo",
                            messages=[{"role": "user", "content": user_text}]
                        )
                        
                        ai_response = response.choices[0].message.content
                        logger.info(f"OpenAI response: {ai_response[:100]}...")
                        await context.send_activity(ai_response)
                        
                    except Exception as e:
                        logger.error(f"OpenAI API error: {str(e)}")
                        await context.send_activity(f"OpenAI API –∞–ª–¥–∞–∞: {str(e)}")
                        
                else:
                    logger.info(f"Non-message activity type: {activity.type}")
                    
            except Exception as e:
                logger.error(f"Error in logic function: {str(e)}")
                await context.send_activity(f"–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞: {str(e)}")

        # Bot adapter –∞—à–∏–≥–ª–∞–Ω –º–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
        try:
            auth_header = request.headers.get('Authorization', '')
            logger.info(f"Auth header present: {bool(auth_header)}")
            
            # Async function-–∏–π–≥ sync –∫–æ–Ω—Ç–µ–∫—Å—Ç—ç–¥ –∞–∂–∏–ª–ª—É—É–ª–∞—Ö
            asyncio.run(ADAPTER.process_activity(activity, auth_header, logic))
            logger.info("Message processed successfully")
            return jsonify({"status": "success"}), 200
            
        except Exception as e:
            logger.error(f"Adapter processing error: {str(e)}")
            return jsonify({"error": f"Bot framework error: {str(e)}"}), 500
            
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        return jsonify({"error": f"Internal server error: {str(e)}"}), 500

# Error handler
@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 error: {str(error)}")
    return jsonify({"error": "Internal server error"}), 500

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    logger.info(f"Starting Flask app on port {port}")
    app.run(host="0.0.0.0", port=port, debug=True)