import requests
from typing import Dict, List, Optional
import os
import time

# ---------------- CONFIG ----------------
TENANT_ID     = os.getenv("TENANT_ID")
CLIENT_ID     = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")

_cached_token = None
_token_expiry = 0

# ---------------- ACCESS TOKEN ----------------
def get_access_token() -> str:
    """Microsoft Graph API-–¥ —Ö–∞–Ω–¥–∞—Ö token –∞–≤–∞—Ö"""
    url = f"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token"
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    data = {
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "scope": "https://graph.microsoft.com/.default",
        "grant_type": "client_credentials"
    }

    response = requests.post(url, headers=headers, data=data)
    if response.status_code != 200:
        print("‚ùå Access token –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
        print("Status code:", response.status_code)
        print("Response:", response.text)
        raise Exception("Access token –∞–≤–∞—Ö–∞–¥ –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª–ª–æ–æ")

    token_data = response.json()
    return token_data["access_token"]

def get_cached_access_token() -> str:
    global _cached_token, _token_expiry

    if _cached_token and time.time() < _token_expiry - 10:
        return _cached_token

    token = get_access_token()
    _cached_token = token
    _token_expiry = time.time() + 3600
    return _cached_token

# ---------------- USER SEARCH CLASS ----------------
class MicrosoftUsersAPI:
    def __init__(self, access_token: str):
        self.base_url = "https://graph.microsoft.com/v1.0"
        self.headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }

    def search_user_by_email(self, email: str) -> Optional[Dict]:
        from urllib.parse import quote
        encoded_email = quote(email)
        url = f"{self.base_url}/users?$select=id,displayName,mail,jobTitle,department,accountEnabled&$filter=mail eq '{encoded_email}'"
        response = requests.get(url, headers=self.headers)

        if response.status_code != 200:
            print("‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á —Ö–∞–π—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
            print("Status code:", response.status_code)
            print("Response:", response.text)
            return None

        users = response.json().get("value", [])
        return users[0] if users else None

    def print_user_info(self, user: Dict, title: str = "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª"):
        print(f"\n{title}:")
        print("-" * 50)
        print(f"–ù—ç—Ä: {user.get('displayName', 'N/A')}")
        print(f"–ò-–º—ç–π–ª: {user.get('mail', 'N/A')}")
        print(f"–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª: {user.get('jobTitle', 'N/A')}")
        print(f"–•—ç–ª—Ç—ç—Å: {user.get('department', 'N/A')}")
        print(f"ID: {user.get('id', 'N/A')}")
        print(f"Account enabled: {'‚úÖ Yes' if user.get('accountEnabled', True) else '‚ùå No'}")

# ---------------- PLANNER TASKS CLASS ----------------
class MicrosoftPlannerTasksAPI:
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω Planner —Ç–∞—Å–∫—É—É–¥ –±–æ–ª–æ–Ω —Ç–∞—Å–∫—ã–Ω URL –∞–≤–∞—Ö —ç–Ω–≥–∏–π–Ω API"""
    def __init__(self, access_token: str):
        self.base_url = "https://graph.microsoft.com/v1.0"
        self.headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json",
        }

    def get_user_tasks(self, user_email: str) -> List[Dict]:
        """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω planner —Ç–∞—Å–∫—É—É–¥—ã–≥ –∞–≤–∞—Ö"""
        url = f"{self.base_url}/users/{user_email}/planner/tasks"
        response = requests.get(url, headers=self.headers)
        if response.status_code != 200:
            print("‚ùå –¢–∞—Å–∫—É—É–¥ –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
            print("Status code:", response.status_code)
            print("Response:", response.text)
            return []
        return response.json().get("value", [])

    def get_task_details(self, task_id: str) -> Optional[Dict]:
        url = f"{self.base_url}/planner/tasks/{task_id}"
        response = requests.get(url, headers=self.headers)
        if response.status_code != 200:
            print("‚ùå –¢–∞—Å–∫—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
            print("Status code:", response.status_code)
            print("Response:", response.text)
            return None
        return response.json()

    def generate_task_url(self, task_id: str) -> Optional[str]:
        """Planner —Ç–∞—Å–∫—ã–Ω –≤–µ–± URL (—à–∏–Ω—ç —Ñ–æ—Ä–º–∞—Ç) –≥–∞—Ä–≥–∞–∂ –∞–≤–∞—Ö"""
        try:
            task_details = self.get_task_details(task_id)
            if not task_details:
                return None
            plan_id = task_details.get("planId")
            if not plan_id:
                return None
            return f"https://planner.cloud.microsoft/webui/plan/{plan_id}/view/board/task/{task_id}?tid={TENANT_ID}"
        except Exception as exc:
            print(f"‚ùå URL “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {exc}")
            return None

# ---------------- TASK ASSIGNMENT CLASS ----------------
class TaskAssignmentManager:
    def __init__(self, access_token: str):
        self.users_api = MicrosoftUsersAPI(access_token)
        self.base_url = "https://graph.microsoft.com/v1.0"
        self.headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }

    def get_user_tasks(self, user_id: str) -> List[Dict]:
        url = f"{self.base_url}/users/{user_id}/planner/tasks"
        response = requests.get(url, headers=self.headers)
        if response.status_code != 200:
            print("‚ùå –¢–∞—Å–∫—É—É–¥ –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
            print("Status code:", response.status_code)
            print("Response:", response.text)
            return []
        return response.json().get("value", [])

    def get_task_details(self, task_id: str) -> Optional[Dict]:
        url = f"{self.base_url}/planner/tasks/{task_id}"
        response = requests.get(url, headers=self.headers)
        if response.status_code != 200:
            print("‚ùå –¢–∞—Å–∫—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:")
            print("Status code:", response.status_code)
            print("Response:", response.text)
            return None
        return response.json()

    def generate_task_url(self, task_id: str) -> Optional[str]:
        """–¢–∞—Å–∫—ã–Ω –≤–µ–± URL “Ø“Ø—Å–≥—ç—Ö"""
        try:
            task_details = self.get_task_details(task_id)
            if not task_details:
                return None

            plan_id = task_details.get('planId')
            if not plan_id:
                return None

            # Microsoft Planner Task URL format (—à–∏–Ω—ç —Ñ–æ—Ä–º–∞—Ç):
            # https://planner.cloud.microsoft/webui/plan/{plan-id}/view/board/task/{task-id}?tid={tenant-id}
            tenant_id = TENANT_ID
            task_url = f"https://planner.cloud.microsoft/webui/plan/{plan_id}/view/board/task/{task_id}?tid={tenant_id}"
            
            return task_url

        except Exception as e:
            print(f"‚ùå URL “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}")
            return None

    def print_task_info(self, task: Dict, index: int = None, show_url: bool = False):
        prefix = f"{index}. " if index is not None else ""
        print(f"{prefix}üìã {task.get('title', '–ù—ç—Ä–≥“Ø–π —Ç–∞—Å–∫')}")
        print(f"   ID: {task.get('id', 'N/A')}")
        print(f"   –¢”©–ª”©–≤: {task.get('percentComplete', 0)}%")
        print(f"   –¢—ç—Ä–≥“Ø“Ø–ª—ç—Ö —ç—Ä—ç–º–±—ç: {task.get('priority', 'N/A')}")
        print(f"   –î—É—É—Å–∞—Ö –æ–≥–Ω–æ–æ: {task.get('dueDateTime', 'N/A')}")
        print(f"   –•—É–≤–∞–∞—Ä–∏–ª–∞–≥–¥—Å–∞–Ω: {len(task.get('assignments', {}))} —Ö“Ø–Ω")
        
        if show_url:
            task_url = self.generate_task_url(task.get('id'))
            if task_url:
                print(f"   üîó –¢–∞—Å–∫—ã–Ω URL: {task_url}")
                
                # –ü–ª–∞–Ω—ã–Ω URL —á —Ö–∞—Ä—É—É–ª–∞—Ö
                # task_details = self.get_task_details(task.get('id'))
                # if task_details and task_details.get('planId'):
                #     plan_url = self.generate_plan_url(task_details.get('planId'))
                #     print(f"   üìã –ü–ª–∞–Ω—ã–Ω URL: {plan_url}")
            else:
                print(f"   üîó URL: –ê–≤–∞—Ö –±–æ–ª–æ–º–∂–≥“Ø–π")
        
        print("-" * 40)

    def get_user_tasks_with_urls(self, user_email: str) -> List[Dict]:
        """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥—É—É—Å–∞–∞–≥“Ø–π —Ç–∞—Å–∫—É—É–¥—ã–≥ URL-—Ç–∞–π —Ö–∞–º—Ç –±—É—Ü–∞–∞—Ö"""
        user = self.users_api.search_user_by_email(user_email)
        if not user:
            print(f"‚ùå '{user_email}' —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return []

        all_tasks = self.get_user_tasks(user.get('id'))
        if not all_tasks:
            print(f"‚ÑπÔ∏è '{user_email}' —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞–≥–¥—Å–∞–Ω —Ç–∞—Å–∫ –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞")
            return []

        # –ó”©–≤—Ö”©–Ω 100% –¥—É—É—Å–∞–∞–≥“Ø–π —Ç–∞—Å–∫—É—É–¥—ã–≥ —à“Ø“Ø—Ö
        incomplete_tasks = [task for task in all_tasks if task.get('percentComplete', 0) < 100]
        
        if not incomplete_tasks:
            print(f"‚ÑπÔ∏è '{user_email}' —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ –¥—É—É—Å–∞–∞–≥“Ø–π —Ç–∞—Å–∫ –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞ (–±“Ø—Ö —Ç–∞—Å–∫ 100% –¥—É—É—Å—Å–∞–Ω)")
            return []

        # URL-—É—É–¥—ã–≥ –Ω—ç–º—ç—Ö
        tasks_with_urls = []
        for task in incomplete_tasks:
            task_url = self.generate_task_url(task.get('id'))
            task_with_url = {
                **task,
                'task_url': task_url
            }
            tasks_with_urls.append(task_with_url)

        return tasks_with_urls

    def show_user_tasks_with_urls(self, user_email: str) -> bool:
        """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç–∞—Å–∫—É—É–¥—ã–≥ URL-—Ç–∞–π —Ö–∞–º—Ç —Ö–∞—Ä—É—É–ª–∞—Ö (–∑”©–≤—Ö”©–Ω –¥—É—É—Å–∞–∞–≥“Ø–π —Ç–∞—Å–∫—É—É–¥)"""
        print(f"üîç {user_email} —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥—É—É—Å–∞–∞–≥“Ø–π —Ç–∞—Å–∫—É—É–¥:")
        print("=" * 60)

        user = self.users_api.search_user_by_email(user_email)
        if not user:
            print(f"‚ùå '{user_email}' —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return False

        self.users_api.print_user_info(user, "–•—ç—Ä—ç–≥–ª—ç–≥—á")

        all_tasks = self.get_user_tasks(user.get('id'))
        if not all_tasks:
            print(f"‚ÑπÔ∏è '{user_email}' —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞–≥–¥—Å–∞–Ω —Ç–∞—Å–∫ –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞")
            return True

        # –ó”©–≤—Ö”©–Ω 100% –¥—É—É—Å–∞–∞–≥“Ø–π —Ç–∞—Å–∫—É—É–¥—ã–≥ —à“Ø“Ø—Ö
        incomplete_tasks = [task for task in all_tasks if task.get('percentComplete', 0) < 100]
        
        if not incomplete_tasks:
            print(f"‚ÑπÔ∏è '{user_email}' —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ –¥—É—É—Å–∞–∞–≥“Ø–π —Ç–∞—Å–∫ –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞ (–±“Ø—Ö —Ç–∞—Å–∫ 100% –¥—É—É—Å—Å–∞–Ω)")
            return True

        print(f"\n‚úÖ {len(incomplete_tasks)} –¥—É—É—Å–∞–∞–≥“Ø–π —Ç–∞—Å–∫ –æ–ª–¥–ª–æ–æ (URL-—Ç–∞–π):")
        for i, task in enumerate(incomplete_tasks, 1):
            self.print_task_info(task, i, show_url=True)

        return True

# ---------------- MAIN ----------------
def main():
    print("üîç –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥—É—É—Å–∞–∞–≥“Ø–π —Ç–∞—Å–∫—É—É–¥—ã–≥ URL-—Ç–∞–π —Ö–∞–º—Ç —Ö–∞—Ä–∞—Ö")
    print("=" * 60)

    try:
        token = get_cached_access_token()
        assignment_manager = TaskAssignmentManager(token)

        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç–∞—Å–∫—É—É–¥—ã–≥ URL-—Ç–∞–π —Ö–∞–º—Ç —Ö–∞—Ä–∞—Ö
        user_email = input("–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∏-–º—ç–π–ª: ").strip()
        if not user_email:
            print("‚ùå –ò-–º—ç–π–ª –æ—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞")
            return

        # –•–∞—Ä–∞—Ö —ç—Å–≤—ç–ª –±—É—Ü–∞–∞—Ö —Å–æ–Ω–≥–æ–ª—Ç
        choice = input("1. –•–∞—Ä–∞—Ö, 2. –ë—É—Ü–∞–∞—Ö (1/2): ").strip()
        
        if choice == "2":
            # –¢–∞—Å–∫—É—É–¥—ã–≥ URL-—Ç–∞–π —Ö–∞–º—Ç –±—É—Ü–∞–∞—Ö
            tasks_with_urls = assignment_manager.get_user_tasks_with_urls(user_email)
            if tasks_with_urls:
                print(f"\n‚úÖ {len(tasks_with_urls)} —Ç–∞—Å–∫ URL-—Ç–∞–π —Ö–∞–º—Ç –±—É—Ü–∞–∞–≥–¥–∞–ª–∞–∞:")
                for i, task in enumerate(tasks_with_urls, 1):
                    print(f"{i}. {task.get('title')} - {task.get('task_url')}")
            return
        
        # –ê–Ω—Ö–¥–∞–≥—á —Ñ—É–Ω–∫—Ü - —Ö–∞—Ä–∞—Ö
        assignment_manager.show_user_tasks_with_urls(user_email)
        
    except Exception as e:
        print(f"‚ùå –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}")

if __name__ == "__main__":
    main()