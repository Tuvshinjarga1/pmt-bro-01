"""
Teams Authentication and Messaging Service
"""

import requests
import json
from typing import Dict, Optional
from config import Config

class TeamsAuthService:
    """Teams –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö —Å–µ—Ä–≤–∏—Å"""
    
    def __init__(self):
        config = Config()
        self.webhook_url = config.TEAMS_WEBHOOK_URL
        
    def send_leave_request_to_manager(self, leave_request: Dict) -> bool:
        """
        –õ–∏–¥—ç—Ä—Ç —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Ö
        """
        try:
            # Leave request –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ñ–æ—Ä–º–∞—Ç–ª–∞—Ö
            message = self._format_leave_request_message(leave_request)
            
            # Teams webhook-–∞–∞—Ä –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
            success = self._send_teams_message(message)
            
            return success
            
        except Exception as e:
            print(f"Teams –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {str(e)}")
            return False
    
    def _format_leave_request_message(self, leave_request: Dict) -> Dict:
        """–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ Teams –º–µ—Å—Å–µ–∂ —Ñ–æ—Ä–º–∞—Ç–∞–∞—Ä –±—ç–ª—Ç–≥—ç—Ö"""
        
        user_email = leave_request.get("user_email", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á")
        start_date = leave_request.get("start_date", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
        end_date = leave_request.get("end_date", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π") 
        reason = leave_request.get("reason", "–®–∞–ª—Ç–≥–∞–∞–Ω –¥—É—Ä–¥–∞–∞–≥“Ø–π")
        hours = leave_request.get("in_active_hours", 8.0)
        
        # Teams Adaptive Card —Ñ–æ—Ä–º–∞—Ç
        card = {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "0076D7",
            "summary": f"–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç - {user_email}",
            "sections": [
                {
                    "activityTitle": "üèñÔ∏è –®–∏–Ω—ç —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç",
                    "activitySubtitle": f"–•“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Å—ç–Ω: {user_email}",
                    "activityImage": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQy5U8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8",
                    "facts": [
                        {
                            "name": "üë§ –•“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Å—ç–Ω:",
                            "value": user_email
                        },
                        {
                            "name": "üìÖ –≠—Ö–ª—ç—Ö ”©–¥”©—Ä:",
                            "value": start_date
                        },
                        {
                            "name": "üìÖ –î—É—É—Å–∞—Ö ”©–¥”©—Ä:",  
                            "value": end_date
                        },
                        {
                            "name": "‚è∞ –ù–∏–π—Ç —Ü–∞–≥:",
                            "value": f"{hours} —Ü–∞–≥"
                        },
                        {
                            "name": "üìù –®–∞–ª—Ç–≥–∞–∞–Ω:",
                            "value": reason
                        }
                    ],
                    "markdown": True
                }
            ],
            "potentialAction": [
                {
                    "@type": "ActionCard",
                    "name": "‚úÖ –ó”©–≤—à”©”©—Ä”©—Ö",
                    "inputs": [
                        {
                            "@type": "TextInput",
                            "id": "comment",
                            "isMultiline": True,
                            "title": "–¢—ç–º–¥—ç–≥–ª—ç–ª (–∑–∞–∞–≤–∞–ª –±–∏—à)"
                        }
                    ],
                    "actions": [
                        {
                            "@type": "HttpPOST",
                            "name": "–ó”©–≤—à”©”©—Ä”©—Ö",
                            "target": f"{self._get_callback_url()}/approve",
                            "body": json.dumps({
                                "user_email": user_email,
                                "action": "approve",
                                "comment": "{{comment.value}}"
                            })
                        }
                    ]
                },
                {
                    "@type": "ActionCard", 
                    "name": "‚ùå –¢–∞—Ç–≥–∞–ª–∑–∞—Ö",
                    "inputs": [
                        {
                            "@type": "TextInput",
                            "id": "reason",
                            "isMultiline": True,
                            "title": "–¢–∞—Ç–≥–∞–ª–∑–∞—Ö —à–∞–ª—Ç–≥–∞–∞–Ω"
                        }
                    ],
                    "actions": [
                        {
                            "@type": "HttpPOST",
                            "name": "–¢–∞—Ç–≥–∞–ª–∑–∞—Ö",
                            "target": f"{self._get_callback_url()}/reject",
                            "body": json.dumps({
                                "user_email": user_email,
                                "action": "reject", 
                                "reason": "{{reason.value}}"
                            })
                        }
                    ]
                }
            ]
        }
        
        return card
    
    def _send_teams_message(self, message: Dict) -> bool:
        """Teams webhook-–∞–∞—Ä –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö"""
        
        try:
            headers = {
                'Content-Type': 'application/json'
            }
            
            response = requests.post(
                self.webhook_url,
                headers=headers,
                data=json.dumps(message),
                timeout=10
            )
            
            if response.status_code == 200:
                print("‚úÖ Teams –º–µ—Å—Å–µ–∂ –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç")
                return True
            else:
                print(f"‚ùå Teams –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Teams –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {str(e)}")
            return False
    
    def _get_callback_url(self) -> str:
        """Callback URL –æ–ª–æ—Ö"""
        # –û–¥–æ–æ–≥–æ–æ—Ä placeholder, —Ö–æ–∂–∏–º –±–æ–¥–∏—Ç URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
        return "https://your-bot-url.com/api/leave-callback"
    
    def send_simple_notification(self, title: str, message: str) -> bool:
        """–≠–Ω–≥–∏–π–Ω –º—ç–¥—ç–≥–¥—ç–ª –∏–ª–≥—ç—ç—Ö"""
        
        simple_card = {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions", 
            "themeColor": "0076D7",
            "summary": title,
            "sections": [
                {
                    "activityTitle": title,
                    "text": message,
                    "markdown": True
                }
            ]
        }
        
        return self._send_teams_message(simple_card) 