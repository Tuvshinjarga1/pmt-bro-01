"""
Teams Authentication and Messaging Service
"""

import requests
import json
from typing import Dict, Optional
from datetime import datetime
from config import Config

class TeamsAuthService:
    """Teams –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö —Å–µ—Ä–≤–∏—Å"""
    
    def __init__(self):
        try:
            config = Config()
            self.webhook_url = config.TEAMS_WEBHOOK_URL
            
            if not self.webhook_url:
                print("‚ùå Teams webhook URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞")
                
        except Exception as e:
            print(f"‚ùå Teams auth service —ç—Ö–ª“Ø“Ø–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {str(e)}")
            self.webhook_url = None
        
    def send_leave_request_to_manager(self, leave_request: Dict, manager_email: str = None, user_tasks: str = None) -> bool:
        """
        –õ–∏–¥—ç—Ä—Ç —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Ö (Direct Message —ç—Å–≤—ç–ª Channel)
        """
        try:
            if manager_email:
                # Direct message –ª–∏–¥—ç—Ä—Ç –∏–ª–≥—ç—ç—Ö
                success = self._send_direct_message_to_manager(leave_request, manager_email, user_tasks)
            else:
                # Channel –¥—ç—ç—Ä webhook –∏–ª–≥—ç—ç—Ö (fallback)
                message = self._format_leave_request_message(leave_request)
                success = self._send_teams_message(message)
            
            return success
            
        except Exception as e:
            print(f"Teams –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {str(e)}")
            return False
    
    def _send_direct_message_to_manager(self, leave_request: Dict, manager_email: str, user_tasks: str = None) -> bool:
        """–õ–∏–¥—ç—Ä—Ç direct message –∏–ª–≥—ç—ç—Ö"""
        
        try:
            from planner_service import get_access_token
            access_token = get_access_token()
            
            if not access_token:
                print("‚ùå Graph API token –∞–ª–≥–∞ –±–∞–π–Ω–∞")
                return False
            
            user_email = leave_request.get("user_email", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
            start_date = leave_request.get("start_date", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
            end_date = leave_request.get("end_date", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
            reason = leave_request.get("reason", "–®–∞–ª—Ç–≥–∞–∞–Ω –¥—É—Ä–¥–∞–∞–≥“Ø–π")
            hours = leave_request.get("in_active_hours", 8.0)
            
            # Message body with tasks
            message_body = f"""
üèñÔ∏è **–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç**

üë§ **–•“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Å—ç–Ω:** {user_email}
üìÖ **–≠—Ö–ª—ç—Ö ”©–¥”©—Ä:** {start_date}
üìÖ **–î—É—É—Å–∞—Ö ”©–¥”©—Ä:** {end_date}
‚è∞ **–ù–∏–π—Ç —Ü–∞–≥:** {hours} —Ü–∞–≥
üìù **–®–∞–ª—Ç–≥–∞–∞–Ω:** {reason}

üìã **–¢—É—Ö–∞–π–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –æ–¥–æ–æ–≥–∏–π–Ω –¥—É—Ç—É—É –¥–∞–∞–ª–≥–∞–≤—Ä—É—É–¥:**

{user_tasks if user_tasks else "‚úÖ –î—É—Ç—É—É –¥–∞–∞–ª–≥–∞–≤–∞—Ä –∞–ª–≥–∞ –±–∞–π–Ω–∞"}

---

–¢–∞ —ç–Ω—ç —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –∑”©–≤—à”©”©—Ä”©—Ö —ç—Å–≤—ç–ª —Ç–∞—Ç–≥–∞–ª–∑–∞—Ö –≤—ç?

**–ó”©–≤—à”©”©—Ä”©—Ö:** –•–∞—Ä–∏—É –º–µ—Å—Å–µ–∂—ç—ç—Ä "APPROVE {user_email}" –≥—ç–∂ –±–∏—á–Ω—ç “Ø“Ø
**–¢–∞—Ç–≥–∞–ª–∑–∞—Ö:** –•–∞—Ä–∏—É –º–µ—Å—Å–µ–∂—ç—ç—Ä "REJECT {user_email} —à–∞–ª—Ç–≥–∞–∞–Ω" –≥—ç–∂ –±–∏—á–Ω—ç “Ø“Ø
            """
            
            # Graph API –¥—É—É–¥–∞—Ö - –ª–∏–¥—ç—Ä—Ç direct message –∏–ª–≥—ç—ç—Ö
            chat_url = "https://graph.microsoft.com/v1.0/chats"
            headers = {
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json"
            }
            
            # Chat “Ø“Ø—Å–≥—ç—Ö —ç—Å–≤—ç–ª –æ–ª–æ—Ö
            chat_data = {
                "chatType": "oneOnOne",
                "members": [
                    {
                        "@odata.type": "#microsoft.graph.aadUserConversationMember",
                        "user@odata.bind": f"https://graph.microsoft.com/v1.0/users('{manager_email}')"
                    }
                ]
            }
            
            chat_response = requests.post(chat_url, headers=headers, json=chat_data, timeout=15)
            
            if chat_response.status_code == 201:
                chat_id = chat_response.json().get("id")
                
                # Message –∏–ª–≥—ç—ç—Ö
                message_url = f"https://graph.microsoft.com/v1.0/chats/{chat_id}/messages"
                message_data = {
                    "body": {
                        "contentType": "text",
                        "content": message_body
                    }
                }
                
                message_response = requests.post(message_url, headers=headers, json=message_data, timeout=15)
                
                if message_response.status_code == 201:
                    print("‚úÖ –õ–∏–¥—ç—Ä—Ç direct message –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç")
                    return True
                else:
                    print(f"‚ùå Message –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {message_response.status_code}")
                    return False
            else:
                print(f"‚ùå Chat “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {chat_response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Direct message –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {str(e)}")
            return False
    
    def _format_leave_request_message(self, leave_request: Dict) -> Dict:
        """–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ Teams –º–µ—Å—Å–µ–∂ —Ñ–æ—Ä–º–∞—Ç–∞–∞—Ä –±—ç–ª—Ç–≥—ç—Ö"""
        
        user_email = leave_request.get("user_email", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á")
        start_date = leave_request.get("start_date", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π")
        end_date = leave_request.get("end_date", "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π") 
        reason = leave_request.get("reason", "–®–∞–ª—Ç–≥–∞–∞–Ω –¥—É—Ä–¥–∞–∞–≥“Ø–π")
        hours = leave_request.get("in_active_hours", 8.0)
        
        # Teams Adaptive Card —Ñ–æ—Ä–º–∞—Ç
        card = {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "0076D7",
            "summary": f"–ß”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç - {user_email}",
            "sections": [
                {
                    "activityTitle": "üèñÔ∏è –®–∏–Ω—ç —á”©–ª”©”©–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç",
                    "activitySubtitle": f"–•“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Å—ç–Ω: {user_email}",
                    "activityImage": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQy5U8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8Q8",
                    "facts": [
                        {
                            "name": "üë§ –•“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Å—ç–Ω:",
                            "value": user_email
                        },
                        {
                            "name": "üìÖ –≠—Ö–ª—ç—Ö ”©–¥”©—Ä:",
                            "value": start_date
                        },
                        {
                            "name": "üìÖ –î—É—É—Å–∞—Ö ”©–¥”©—Ä:",  
                            "value": end_date
                        },
                        {
                            "name": "‚è∞ –ù–∏–π—Ç —Ü–∞–≥:",
                            "value": f"{hours} —Ü–∞–≥"
                        },
                        {
                            "name": "üìù –®–∞–ª—Ç–≥–∞–∞–Ω:",
                            "value": reason
                        }
                    ],
                    "markdown": True
                }
            ],
            "potentialAction": [
                {
                    "@type": "ActionCard",
                    "name": "‚úÖ –ó”©–≤—à”©”©—Ä”©—Ö",
                    "inputs": [
                        {
                            "@type": "TextInput",
                            "id": "comment",
                            "isMultiline": True,
                            "title": "–¢—ç–º–¥—ç–≥–ª—ç–ª (–∑–∞–∞–≤–∞–ª –±–∏—à)"
                        }
                    ],
                    "actions": [
                        {
                            "@type": "HttpPOST",
                            "name": "–ó”©–≤—à”©”©—Ä”©—Ö",
                            "target": f"{self._get_callback_url()}/approve",
                            "body": json.dumps({
                                "user_email": user_email,
                                "action": "approve",
                                "comment": "{{comment.value}}"
                            })
                        }
                    ]
                },
                {
                    "@type": "ActionCard", 
                    "name": "‚ùå –¢–∞—Ç–≥–∞–ª–∑–∞—Ö",
                    "inputs": [
                        {
                            "@type": "TextInput",
                            "id": "reason",
                            "isMultiline": True,
                            "title": "–¢–∞—Ç–≥–∞–ª–∑–∞—Ö —à–∞–ª—Ç–≥–∞–∞–Ω"
                        }
                    ],
                    "actions": [
                        {
                            "@type": "HttpPOST",
                            "name": "–¢–∞—Ç–≥–∞–ª–∑–∞—Ö",
                            "target": f"{self._get_callback_url()}/reject",
                            "body": json.dumps({
                                "user_email": user_email,
                                "action": "reject", 
                                "reason": "{{reason.value}}"
                            })
                        }
                    ]
                }
            ]
        }
        
        return card
    
    def _send_teams_message(self, message: Dict) -> bool:
        """Teams webhook-–∞–∞—Ä –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö"""
        
        try:
            if not self.webhook_url:
                print("‚ùå Teams webhook URL –∞–ª–≥–∞ –±–∞–π–Ω–∞")
                return False
                
            headers = {
                'Content-Type': 'application/json'
            }
            
            response = requests.post(
                self.webhook_url,
                headers=headers,
                data=json.dumps(message),
                timeout=15
            )
            
            if response.status_code == 200:
                print("‚úÖ Teams –º–µ—Å—Å–µ–∂ –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç")
                return True
            else:
                print(f"‚ùå Teams –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Teams –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {str(e)}")
            return False
    
    def _get_callback_url(self) -> str:
        """Callback URL –æ–ª–æ—Ö"""
        # –û–¥–æ–æ–≥–æ–æ—Ä placeholder, —Ö–æ–∂–∏–º –±–æ–¥–∏—Ç URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
        return "https://your-bot-url.com/api/leave-callback"
    
    def send_simple_notification(self, title: str, message: str) -> bool:
        """–≠–Ω–≥–∏–π–Ω –º—ç–¥—ç–≥–¥—ç–ª –∏–ª–≥—ç—ç—Ö"""
        
        simple_card = {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions", 
            "themeColor": "0076D7",
            "summary": title,
            "sections": [
                {
                    "activityTitle": title,
                    "text": message,
                    "markdown": True
                }
            ]
        }
        
        return self._send_teams_message(simple_card)
    
    def announce_leave_approval(self, user_email: str, user_name: str, start_date: str, end_date: str) -> bool:
        """Channel –¥—ç—ç—Ä —á”©–ª”©”© –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω —Ç—É—Ö–∞–π –∑–∞—Ä–ª–∞—Ö"""
        
        announcement = {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "28a745",  # Green color
            "summary": f"–ß”©–ª”©”© –∑”©–≤—à”©”©—Ä”©–≥–¥–ª”©”© - {user_name}",
            "sections": [
                {
                    "activityTitle": "‚úÖ –ß”©–ª”©”© –∑”©–≤—à”©”©—Ä”©–≥–¥–ª”©”©",
                    "activitySubtitle": f"{user_name} —á”©–ª”©”© –∞–≤—á –±–∞–π–Ω–∞",
                    "facts": [
                        {
                            "name": "üë§ –•—ç—Ä—ç–≥–ª—ç–≥—á:",
                            "value": user_name
                        },
                        {
                            "name": "üìÖ –•—É–≥–∞—Ü–∞–∞:",
                            "value": f"{start_date} - {end_date}"
                        },
                        {
                            "name": "üïê –¶–∞–≥:",
                            "value": f"{((datetime.strptime(end_date, '%Y-%m-%d') - datetime.strptime(start_date, '%Y-%m-%d')).days + 1) * 8} —Ü–∞–≥"
                        }
                    ],
                    "markdown": True
                }
            ]
        }
        
        return self._send_teams_message(announcement)
    
    def announce_leave_rejection(self, user_email: str, user_name: str, reason: str) -> bool:
        """Channel –¥—ç—ç—Ä —á”©–ª”©”© —Ç–∞—Ç–≥–∞–ª–∑—Å–∞–Ω —Ç—É—Ö–∞–π –∑–∞—Ä–ª–∞—Ö"""
        
        announcement = {
            "@type": "MessageCard", 
            "@context": "http://schema.org/extensions",
            "themeColor": "dc3545",  # Red color
            "summary": f"–ß”©–ª”©”© —Ç–∞—Ç–≥–∞–ª–∑–∞–≥–¥–ª–∞–∞ - {user_name}",
            "sections": [
                {
                    "activityTitle": "‚ùå –ß”©–ª”©”© —Ç–∞—Ç–≥–∞–ª–∑–∞–≥–¥–ª–∞–∞",
                    "activitySubtitle": f"{user_name}-–Ω —Ö“Ø—Å—ç–ª—Ç —Ç–∞—Ç–≥–∞–ª–∑–∞–≥–¥–ª–∞–∞",
                    "facts": [
                        {
                            "name": "üë§ –•—ç—Ä—ç–≥–ª—ç–≥—á:",
                            "value": user_name
                        },
                        {
                            "name": "üìù –®–∞–ª—Ç–≥–∞–∞–Ω:",
                            "value": reason
                        }
                    ],
                    "markdown": True
                }
            ]
        }
        
        return self._send_teams_message(announcement) 